///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - см. возвращаемое значение
//       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.РазрешеноИзменятьВарианты = Ложь;
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
// См. "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	//Если СмещениеСтандартногоВремени() = 0 Тогда //ЖурналРегистрации.СмещениеВремениСервера() = 0 Тогда
		ПараметрКД = Форма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатыВЧасовомПоясеСервера");
		Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ПараметрКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

// См. ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора.
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	ИмяПоля = Строка(СвойстваНастройки.ПолеКД);
	Если ИмяПоля = "ПараметрыДанных.СкрытьРегламентныеЗадания" Тогда
		МассивРегламентныхЗаданий = СписокВсехРегламентныхЗаданий();
		СвойстваНастройки.ЗначенияДляВыбора.Очистить();
		Для Каждого Элемент Из МассивРегламентныхЗаданий Цикл
			СвойстваНастройки.ЗначенияДляВыбора.Добавить(Элемент.УИД, Элемент.Наименование);
		КонецЦикла;
		СвойстваНастройки.ЗначенияДляВыбора.СортироватьПоПредставлению();
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровкиОбъект, СтандартнаяОбработка, АдресХранилища)
	
	СтандартнаяОбработка     = Ложь;
	НастройкиОтчета          = КомпоновщикНастроек.ПолучитьНастройки();
	Период                   = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Период").Значение;
	ВариантОтчета            = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ВариантОтчета").Значение;
	ДатыВЧасовомПоясеСервера = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ДатыВЧасовомПоясеСервера").Значение;  
	
	Если ДатыВЧасовомПоясеСервера Тогда
		СмещениеВремениСервера = 0;
	Иначе
		СмещениеВремениСервера = СмещениеВремениСервера();
	КонецЕсли;
	
	СхемаКомпоновкиДанных.Параметры.ПериодДень.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		
	Если ВариантОтчета = "КонтрольЖурналаРегистрации" Тогда

		РезультатФормированияОтчета = СформироватьОтчетКонтрольЖурналаРегистрации(Период.ДатаНачала, Период.ДатаОкончания, СмещениеВремениСервера);  
			
		// ОтчетПустой - параметр, показывающий наличие информации в отчете. Необходим для рассылки отчетов.
		ОтчетПустой = РезультатФормированияОтчета.ОтчетПустой;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
		ДокументРезультат.Вывести(РезультатФормированияОтчета.Отчет);  
	Иначе     
		
		ПараметрыОтчета = ПараметрыОтчетаАктивностьПользователя(НастройкиОтчета);
		ПараметрыОтчета.Вставить("ДатаНачала",               Период.ДатаНачала);
		ПараметрыОтчета.Вставить("ДатаОкончания",            Период.ДатаОкончания);
		ПараметрыОтчета.Вставить("ВариантОтчета",            ВариантОтчета);
		ПараметрыОтчета.Вставить("ДатыВЧасовомПоясеСервера", ДатыВЧасовомПоясеСервера); 
		
		Если ВариантОтчета = "АнализАктивностиПользователей" Тогда
			СхемаКомпоновкиДанных.Параметры.Пользователь.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		КонецЕсли;
		
		КомпоновщикМакета   = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки     = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровкиОбъект); 
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ДанныеОтчета = ДанныеИзЖурналаРегистрации(ПараметрыОтчета);        
		
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ДанныеОтчета.ОтчетПустой);
		ДанныеОтчета.Удалить("ОтчетПустой");
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ДанныеОтчета, ДанныеРасшифровкиОбъект, Истина);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		ПроцессорВывода.НачатьВывод();  
		
		Пока Истина Цикл  
			
			ЭлементРезультата = ПроцессорКомпоновки.Следующий();  
			
			Если ЭлементРезультата = Неопределено Тогда
				Прервать;
			Иначе
				ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			КонецЕсли;
		КонецЦикла;    
		
		ДокументРезультат.ПоказатьУровеньГруппировокСтрок(1);
		ПроцессорВывода.ЗакончитьВывод();  
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ВариантОтчета = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ВариантОтчета").Значение;
	Если ВариантОтчета = "ДиаграммаГанта" Тогда
		ПериодДень = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ПериодДень").Значение;
		НачалоВыборки = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("НачалоВыборки");
		КонецВыборки = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("КонецВыборки");
		
		Если Не ЗначениеЗаполнено(ПериодДень.Дата) Тогда
			//ОбщегоНазначения.СообщитьПользователю(
			//	НСтр("ru = 'Не заполнено значение поля День.'"), , );  
			Сообщить(НСтр("ru = 'Не заполнено значение поля День.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НачалоВыборки.Значение)
		И ЗначениеЗаполнено(КонецВыборки.Значение)
		И НачалоВыборки.Значение > КонецВыборки.Значение
		И НачалоВыборки.Использование 
		И КонецВыборки.Использование Тогда
			//ОбщегоНазначения.СообщитьПользователю(
			//	НСтр("ru = 'Значение начала периода не может быть больше значения конца.'"), , );   
				Сообщить(НСтр("ru = 'Значение начала периода не может быть больше значения конца.'"));
				
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВариантОтчета = "АктивностьПользователя" Тогда
		
		Пользователь = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Пользователь").Значение;
		
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			//ОбщегоНазначения.СообщитьПользователю(
			//	НСтр("ru = 'Не заполнено значение поля Пользователь.'"), , );  
				
			Сообщить(НСтр("ru = 'Не заполнено значение поля Пользователь.'"));
				
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ИмяПользователяИБ(Пользователь) = Неопределено Тогда
			//ОбщегоНазначения.СообщитьПользователю(
			//	НСтр("ru = 'Формирование отчета возможно только для пользователя, которому указано имя для входа в программу.'"), , );  
			Сообщить(НСтр("ru = 'Формирование отчета возможно только для пользователя, которому указано имя для входа в программу.'"));
				
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВариантОтчета = "АнализАктивностиПользователей" Тогда
		
		ПользователиИГруппы = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ПользователиИГруппы").Значение;
		
		Если ТипЗнч(ПользователиИГруппы) = Тип("СправочникСсылка.Employees") Тогда
			
			Если ИмяПользователяИБ(ПользователиИГруппы) = Неопределено Тогда
				//ОбщегоНазначения.СообщитьПользователю(
				//	НСтр("ru = 'Формирование отчета возможно только для пользователя, которому указано имя для входа в программу.'"), , ); 
				Сообщить(НСтр("ru = 'Формирование отчета возможно только для пользователя, которому указано имя для входа в программу.'"));
					
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПользователиИГруппы) Тогда
			//ОбщегоНазначения.СообщитьПользователю(
			//	НСтр("ru = 'Не заполнено значение поля Пользователи.'"), , );   
				
			Сообщить(НСтр("ru = 'Не заполнено значение поля Пользователи.'"));
				
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыОтчетаАктивностьПользователя(НастройкиОтчета)
	
	ПользователиИГруппы    = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ПользователиИГруппы").Значение;
	Пользователь           = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Пользователь").Значение;
	ВыводитьБизнесПроцессы = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ВыводитьБизнесПроцессы");
	ВыводитьЗадачи         = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ВыводитьЗадачи");
	ВыводитьСправочники    = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ВыводитьСправочники");
	ВыводитьДокументы      = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ВыводитьДокументы");
	
	Если Не ВыводитьБизнесПроцессы.Использование Тогда
		НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьБизнесПроцессы", Ложь);
	КонецЕсли;
	Если Не ВыводитьЗадачи.Использование Тогда
		НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьЗадачи", Ложь);
	КонецЕсли;
	Если Не ВыводитьСправочники.Использование Тогда
		НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьСправочники", Ложь);
	КонецЕсли;
	Если Не ВыводитьДокументы.Использование Тогда
		НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ВыводитьДокументы", Ложь);
	КонецЕсли;		
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПользователиИГруппы",    ПользователиИГруппы);
	ПараметрыОтчета.Вставить("Пользователь",           Пользователь);
	ПараметрыОтчета.Вставить("ВыводитьБизнесПроцессы", ВыводитьБизнесПроцессы.Значение);
	ПараметрыОтчета.Вставить("ВыводитьЗадачи",         ВыводитьЗадачи.Значение);
	ПараметрыОтчета.Вставить("ВыводитьСправочники",    ВыводитьСправочники.Значение);
	ПараметрыОтчета.Вставить("ВыводитьДокументы",      ВыводитьДокументы.Значение);
	
	Возврат ПараметрыОтчета;  
	
КонецФункции

Процедура ПродолжительностьРаботыРегламентныхЗаданий(НастройкиОтчета, ДокументРезультат, КомпоновщикНастроек, СмещениеВремениСервера)
	ВыводитьЗаголовок = НастройкиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок");
	ВыводитьОтбор = НастройкиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
	ЗаголовокОтчета = НастройкиОтчета.ПараметрыВывода.Элементы.Найти("Заголовок");
	ПериодДень = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ПериодДень").Значение;
	НачалоВыборки = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("НачалоВыборки");
	КонецВыборки = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("КонецВыборки");
	МинимальнаяПродолжительностьСеансовРегламентныхЗаданий = НастройкиОтчета.ПараметрыДанных.Элементы.Найти(
																"МинимальнаяПродолжительностьСеансовРегламентныхЗаданий");
	ОтображатьФоновыеЗадания = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ОтображатьФоновыеЗадания");
	СкрытьРегламентныеЗадания = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("СкрытьРегламентныеЗадания");
	РазмерОдновременноСессий = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("РазмерОдновременноСессий");
	
	// Проверка наличия флажка использовать у параметров.
	Если Не МинимальнаяПродолжительностьСеансовРегламентныхЗаданий.Использование Тогда
		НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("МинимальнаяПродолжительностьСеансовРегламентныхЗаданий", 0);
	КонецЕсли;
	Если Не ОтображатьФоновыеЗадания.Использование Тогда
		НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ОтображатьФоновыеЗадания", Ложь);
	КонецЕсли;
	Если Не СкрытьРегламентныеЗадания.Использование Тогда
		НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("СкрытьРегламентныеЗадания", "");
	КонецЕсли;
	Если Не РазмерОдновременноСессий.Использование Тогда
		НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("РазмерОдновременноСессий", 0);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(НачалоВыборки.Значение) Тогда
		ПериодДеньДатаНачала = НачалоДня(ПериодДень);
	ИначеЕсли Не НачалоВыборки.Использование Тогда
		ПериодДеньДатаНачала = НачалоДня(ПериодДень);
	Иначе
		ПериодДеньДатаНачала = Дата(Формат(ПериодДень.Дата, "ДЛФ=D") + " " + Формат(НачалоВыборки.Значение, "ДЛФ=T"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонецВыборки.Значение) Тогда
		ПериодДеньДатаОкончания = КонецДня(ПериодДень);
	ИначеЕсли Не КонецВыборки.Использование Тогда
		ПериодДеньДатаОкончания = КонецДня(ПериодДень);
	Иначе
		ПериодДеньДатаОкончания = Дата(Формат(ПериодДень.Дата, "ДЛФ=D") + " " + Формат(КонецВыборки.Значение, "ДЛФ=T"));
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДатаНачала", ПериодДеньДатаНачала);
	ПараметрыЗаполнения.Вставить("ДатаОкончания", ПериодДеньДатаОкончания);
	ПараметрыЗаполнения.Вставить("РазмерОдновременноСессий", РазмерОдновременноСессий.Значение);
	ПараметрыЗаполнения.Вставить("МинимальнаяПродолжительностьСеансовРегламентныхЗаданий", 
								  МинимальнаяПродолжительностьСеансовРегламентныхЗаданий.Значение);
	ПараметрыЗаполнения.Вставить("ОтображатьФоновыеЗадания", ОтображатьФоновыеЗадания.Значение);
	ПараметрыЗаполнения.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	ПараметрыЗаполнения.Вставить("ВыводитьОтбор", ВыводитьОтбор);
	ПараметрыЗаполнения.Вставить("ЗаголовокОтчета", ЗаголовокОтчета);
	ПараметрыЗаполнения.Вставить("СкрытьРегламентныеЗадания", СкрытьРегламентныеЗадания.Значение);
	ПараметрыЗаполнения.Вставить("СмещениеВремениСервера", СмещениеВремениСервера);
	
	//РезультатФормированияОтчета =  ??????
	//	Отчеты.АнализЖурналаРегистрации.СформироватьОтчетПоПродолжительностиРаботыРегламентныхЗаданий(ПараметрыЗаполнения);
	//КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", РезультатФормированияОтчета.ОтчетПустой);
	//ДокументРезультат.Вывести(РезультатФормированияОтчета.Отчет);
КонецПроцедуры

Функция СписокВсехРегламентныхЗаданий()
	УстановитьПривилегированныйРежим(Истина);
	//СписокРегламентныхЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(Новый Структура);
	МассивРегламентныхЗаданий = Новый Массив; // ????????
	//Для Каждого Элемент Из СписокРегламентныхЗаданий Цикл
	//	Если Элемент.Наименование <> "" Тогда
	//		МассивРегламентныхЗаданий.Добавить(Новый Структура("УИД, Наименование", Элемент.УникальныйИдентификатор, 
	//																		Элемент.Наименование));
	//	ИначеЕсли Элемент.Метаданные.Синоним <> "" Тогда
	//		МассивРегламентныхЗаданий.Добавить(Новый Структура("УИД, Наименование", Элемент.УникальныйИдентификатор,
	//																		Элемент.Метаданные.Синоним));
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат МассивРегламентныхЗаданий;
КонецФункции

// Функция, формирующая отчет по зарегистрированным в журнале регистрации ошибкам.
//
// Параметры:
//   ДанныеЖурналаРегистрации - ТаблицаЗначений - выгруженная таблица из журнала регистраций.
//
// Должны присутствовать следующие колонки: Дата, ИмяПользователя, ПредставлениеПриложения,
//                                          ПредставлениеСобытия, Комментарий, Уровень.
//
Функция СформироватьОтчетКонтрольЖурналаРегистрации(ДатаНачала, ДатаОкончания, СмещениеВремениСервера) Экспорт
	
	Результат = Новый Структура; 	
	Отчет = Новый ТабличныйДокумент; 	
	Макет = ПолучитьМакет("МакетОтчетаПоОшибкамВЖурналеРегистрации");
	ДанныеЖурналаРегистрации = ИнформацияПоОшибкамЖурналаРегистрации(ДатаНачала, ДатаОкончания, СмещениеВремениСервера);
	КоличествоЗаписейЖурналаРегистрации = ДанныеЖурналаРегистрации.Количество();
	
	ОтчетПустой = (КоличествоЗаписейЖурналаРегистрации = 0); // Проверяем заполнение отчета.
		
	///////////////////////////////////////////////////////////////////////////////
	// Блок предварительной подготовки данных.
	//
	
	СверткаПоКомментариям = ДанныеЖурналаРегистрации.Скопировать();
	СверткаПоКомментариям.Колонки.Добавить("ИтогПоКомментарию");
	СверткаПоКомментариям.ЗаполнитьЗначения(1, "ИтогПоКомментарию");
	СверткаПоКомментариям.Свернуть("Level, Comment, Event, EventPresentation", "ИтогПоКомментарию");
	
	МассивСтрок_УровеньОшибка = СверткаПоКомментариям.НайтиСтроки(
									Новый Структура("Level", УровеньЖурналаРегистрации.Ошибка));
	
	МассивСтрок_УровеньПредупреждение = СверткаПоКомментариям.НайтиСтроки(
									Новый Структура("Level", УровеньЖурналаРегистрации.Предупреждение));
	
	Свертка_Ошибки         = СверткаПоКомментариям.Скопировать(МассивСтрок_УровеньОшибка);
	Свертка_Ошибки.Сортировать("ИтогПоКомментарию Убыв");
	Свертка_Предупреждения = СверткаПоКомментариям.Скопировать(МассивСтрок_УровеньПредупреждение);
	Свертка_Предупреждения.Сортировать("ИтогПоКомментарию Убыв");
	
	///////////////////////////////////////////////////////////////////////////////
	// Блок формирования самого отчета.
	//
	
	Область = Макет.ПолучитьОбласть("ШапкаОтчета");
	Область.Параметры.ПериодВыборкиНачало    = ДатаНачала;
	Область.Параметры.ПериодВыборкиОкончание = ДатаОкончания;
	Область.Параметры.ПредставлениеИнформационнойБазы = ПредставлениеИнформационнойБазы();
	Отчет.Вывести(Область);
	
	РезультатКомпоновкиТЧ = СформироватьТабличнуюЧасть(Макет, ДанныеЖурналаРегистрации, Свертка_Ошибки);
	
	Отчет.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
	Область = Макет.ПолучитьОбласть("ЗаголовокБлокаОшибки");
	Область.Параметры.ЧислоОшибок = Строка(РезультатКомпоновкиТЧ.Итог);
	Отчет.Вывести(Область);
	
	Если РезультатКомпоновкиТЧ.Итог > 0 Тогда
		Отчет.Вывести(РезультатКомпоновкиТЧ.ТабличнаяЧасть);
	КонецЕсли;
	
	Результат.Вставить("ИтогПоОшибкам", РезультатКомпоновкиТЧ.Итог); 	
	РезультатКомпоновкиТЧ = СформироватьТабличнуюЧасть(Макет, ДанныеЖурналаРегистрации, Свертка_Предупреждения);
	
	Отчет.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
	Область = Макет.ПолучитьОбласть("ЗаголовокБлокаПредупреждения");
	Область.Параметры.ЧислоПредупреждений = РезультатКомпоновкиТЧ.Итог;
	Отчет.Вывести(Область);
	
	Если РезультатКомпоновкиТЧ.Итог > 0 Тогда
		Отчет.Вывести(РезультатКомпоновкиТЧ.ТабличнаяЧасть);
	КонецЕсли;
	
	Результат.Вставить("ИтогПоПредупреждениям", РезультатКомпоновкиТЧ.Итог);	
	Отчет.ОтображатьСетку = Ложь; 	
	Результат.Вставить("Отчет", Отчет); 
	Результат.Вставить("ОтчетПустой", ОтчетПустой);
	Возврат Результат;
	
КонецФункции

// Добавляет в отчет табличную часть по ошибкам. Ошибки выводятся сгруппированными
// по комментарию.
//
// Параметры:
//   Макет  - ТабличныйДокумент - источник форматированных областей, которые будут
//                              использоваться при формировании отчета.
//   ДанныеЖурналаРегистрации   - ТаблицаЗначений - данные по ошибкам и предупреждениям
//                              из журнала регистрации "как есть".
//   СвернутыеДанные - ТаблицаЗначений - свернутая по комментариям информация по их количеству.
//
Функция СформироватьТабличнуюЧасть(Макет, ДанныеЖурналаРегистрации, СвернутыеДанные)
	
	Отчет = Новый ТабличныйДокумент;	
	Итог = 0;
	
	Если СвернутыеДанные.Количество() > 0 Тогда
		Отчет.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
		
		Для Каждого Запись Из СвернутыеДанные Цикл
			Итог = Итог + Запись.ИтогПоКомментарию;
			МассивСтрок = ДанныеЖурналаРегистрации.НайтиСтроки(
				Новый Структура("Level, Comment",
					УровеньЖурналаРегистрации.Ошибка,
					Запись.Comment));
			
			Область = Макет.ПолучитьОбласть("ТелоТабличнойЧастиШапка");
			Область.Параметры.Заполнить(Запись);
			Отчет.Вывести(Область);
			
			Отчет.НачатьГруппуСтрок(, Ложь);
			Для Каждого Строка Из МассивСтрок Цикл
				Область = Макет.ПолучитьОбласть("ТелоТабличнойЧастиДетализация");
				Область.Параметры.Заполнить(Строка);
				Отчет.Вывести(Область);
			КонецЦикла;
			Отчет.ЗакончитьГруппуСтрок();
			Отчет.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
		КонецЦикла;
	КонецЕсли;
	
	Результат = Новый Структура("ТабличнаяЧасть, Итог", Отчет, Итог);
	
	Возврат Результат;
	
КонецФункции

// Функция получает информацию по ошибкам в журнале регистрации по переданному периоду.
//
// Параметры:
//   ДатаНачала    - Дата - начала периода, по которому будет собираться информация.
//   ДатаОкончания - Дата - окончание периода, по которому будет собираться информация.
//
// Возвращаемое значение
//   ТаблицаЗначений - записи из журнала регистрации в соответствии с фильтром:
//                    УровеньЖурналаРегистрации - УровеньЖурналаРегистрации.Ошибка
//                    Начало и Окончание периода - из параметров.
//
Функция ИнформацияПоОшибкамЖурналаРегистрации(Знач ДатаНачала, Знач ДатаОкончания, СмещениеВремениСервера)
	
	ДанныеЖурналаРегистрации = Новый ТаблицаЗначений;
	
	УровниРегистрацииОшибок = Новый Массив;
	УровниРегистрацииОшибок.Добавить(УровеньЖурналаРегистрации.Ошибка);
	УровниРегистрацииОшибок.Добавить(УровеньЖурналаРегистрации.Предупреждение);
	
	ДатаНачала    = ДатаНачала    + СмещениеВремениСервера;
	ДатаОкончания = ДатаОкончания + СмещениеВремениСервера;
	
	УстановитьПривилегированныйРежим(Истина);  
	
	ВыгрузитьЖурналРегистрации(ДанныеЖурналаРегистрации,
							   Новый Структура("StartDate, EndDate, Level", 
							                   ДатаНачала,
											   ДатаОкончания,
							   				   УровниРегистрацииОшибок
											   ));
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СмещениеВремениСервера <> 0 Тогда
		Для Каждого СтрокаТаблицы Из ДанныеЖурналаРегистрации Цикл
			СтрокаТаблицы.Date = СтрокаТаблицы.Date - СмещениеВремениСервера;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЖурналаРегистрации;
	
КонецФункции

// Получить представление физического места размещения информационной базы для отображения администратору.
//
// Возвращаемое значение:
//   Строка - представление информационной базы.
//
// Пример:
// - для ИБ в файлом режиме: \\FileServer\1c_ib\
// - для ИБ в серверном режиме: ServerName:1111 / information_base_name.
//
Функция ПредставлениеИнформационнойБазы()
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	
	//Если ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияСБД) Тогда  // ???????
	//	Возврат Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
	//КонецЕсли;
		
	// Прибавить к имени сервера имя пути информационной базы.
	ПозицияПоиска = СтрНайти(ВРег(СтрокаСоединенияСБД), "SRVR=");
	Если ПозицияПоиска <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияТочкиСЗапятой = СтрНайти(СтрокаСоединенияСБД, ";");
	НачальнаяПозицияКопирования = 6 + 1;
	КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
	
	ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
	
	СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
	
	// Позиция имени сервера
	ПозицияПоиска = СтрНайти(ВРег(СтрокаСоединенияСБД), "REF=");
	Если ПозицияПоиска <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачальнаяПозицияКопирования = 6;
	ПозицияТочкиСЗапятой = СтрНайти(СтрокаСоединенияСБД, ";");
	КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
	
	ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
	ПутьКБД = ИмяСервера + "/ " + ИмяИБНаСервере;
	Возврат ПутьКБД;
	
КонецФункции

Функция ИмяПользователяИБ(ПользовательСсылка) Экспорт   
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ТаблицаДанных  = cmGetUserUUIDsByEmployee(ПользовательСсылка);//ПользовательСсылка.ИдентификаторПользователяИБ;
	
	// Не нашли сотрудника в РС
	Если ТаблицаДанных.Количество() = 0 Тогда
		
		Возврат Неопределено;
	КонецЕсли;	
	
	УИДСтрокой = ТаблицаДанных[0].UserUUID;	
	УИД        = Новый УникальныйИдентификатор(УИДСтрокой);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УИД);
	
	Если ПользовательИБ <> Неопределено Тогда
		Возврат ПользовательИБ.Имя; 
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает информацию по активности пользователей из журнала регистрации
// по переданному периоду.
//
// Параметры:
//    ПараметрыОтчета - Структура:
//    * ДатаНачала          - Дата   - начало периода, по которому будет собираться информация.
//    * ДатаОкончания       - Дата   - окончание периода, по которому будет собираться информация.
//    * Пользователь        - Строка - имя пользователя, по которому проводить анализ.
//                                     Для варианта отчета "Активность пользователя".
//    * ПользователиИГруппы - СписокЗначений - где значение - группа(ы) пользователей и(или)
//                                     пользователь(и), по которым проводить анализ.
//                                     Для варианта отчета "Анализ активности пользователей".
//    * ВариантОтчета       - Строка - "АктивностьПользователя" или "АнализАктивностиПользователей".
//    * ВыводитьЗадачи      - Булево - получать или нет информацию по задачам из журнала регистрации.
//    * ВыводитьСправочники - Булево - получать или нет информацию по справочникам из журнала регистрации.
//    * ВыводитьДокументы   - Булево - получать или нет информацию документов из журнала регистрации.
//    * ВыводитьБизнесПроцессы - Булево - получать или нет информацию по бизнес процессам из журнала регистрации.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица, содержащая не сгруппированную информацию по активности
//     пользователей из журнала регистрации.
//
Функция ДанныеИзЖурналаРегистрации(ПараметрыОтчета) Экспорт
	
	// Подготовка параметров отчета.
	ДатаНачала    = ПараметрыОтчета.ДатаНачала;
	ДатаОкончания = ПараметрыОтчета.ДатаОкончания;
	Пользователь  = ПараметрыОтчета.Пользователь;
	ПользователиИГруппы = ПараметрыОтчета.ПользователиИГруппы;
	ВариантОтчета       = ПараметрыОтчета.ВариантОтчета;
	
	Если ВариантОтчета = "АктивностьПользователя" Тогда
		
		ВыводитьБизнесПроцессы = ПараметрыОтчета.ВыводитьБизнесПроцессы;
		ВыводитьЗадачи         = ПараметрыОтчета.ВыводитьЗадачи;
		ВыводитьСправочники    = ПараметрыОтчета.ВыводитьСправочники;
		ВыводитьДокументы      = ПараметрыОтчета.ВыводитьДокументы;
	Иначе 
		
		ВыводитьСправочники    = Истина;
		ВыводитьДокументы      = Истина;
		ВыводитьБизнесПроцессы = Ложь;
		ВыводитьЗадачи         = Ложь;
	КонецЕсли;
	
	// Формируем таблицу исходных данных.
	ИсходныеДанные = Новый ТаблицаЗначений();
	ИсходныеДанные.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ИсходныеДанные.Колонки.Добавить("Неделя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ИсходныеДанные.Колонки.Добавить("Пользователь");
	ИсходныеДанные.Колонки.Добавить("ЧасовРаботы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ИсходныеДанные.Колонки.Добавить("КоличествоЗапусков", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ИсходныеДанные.Колонки.Добавить("СозданоДокументов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ИсходныеДанные.Колонки.Добавить("СозданоСправочников", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ИсходныеДанные.Колонки.Добавить("ИзмененоДокументов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ИсходныеДанные.Колонки.Добавить("СозданоБизнесПроцессов",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ИсходныеДанные.Колонки.Добавить("СозданоЗадач", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ИсходныеДанные.Колонки.Добавить("ИзмененоБизнесПроцессов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ИсходныеДанные.Колонки.Добавить("ИзмененоЗадач", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ИсходныеДанные.Колонки.Добавить("ИзмененоСправочников",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ИсходныеДанные.Колонки.Добавить("Ошибок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ИсходныеДанные.Колонки.Добавить("Предупреждений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ИсходныеДанные.Колонки.Добавить("ВидОбъекта", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	ИсходныеДанные.Колонки.Добавить("ОбъектСправочникДокумент");
	
	// Расчет максимального количества одновременных сессий.
	ОдновременноСессий = Новый ТаблицаЗначений();
	ОдновременноСессий.Колонки.Добавить("ДатаОдновременноРаботавшихПользователей",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ОдновременноСессий.Колонки.Добавить("ОдновременноРаботавшихПользователей",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ОдновременноСессий.Колонки.Добавить("СписокОдновременноРаботавшихПользователей");
	
	ДанныеЖурналаРегистрации = Новый ТаблицаЗначений;
	
	Уровни = Новый Массив;
	Уровни.Добавить(УровеньЖурналаРегистрации.Информация);
	
	События = Новый Массив;
	События.Добавить("_$Session$_.Start");  // Начало сессии
	События.Добавить("_$Session$_.Finish"); // Конец сессии  
	События.Добавить("_$Data$_.New");       // Добавление данных
	События.Добавить("_$Data$_.Update");    // Изменение данных
	
	ИмяПриложения = Новый Массив;
	ИмяПриложения.Добавить("1CV8C");
	ИмяПриложения.Добавить("WebClient");
	ИмяПриложения.Добавить("1CV8");
	
	ПользовательФильтр = Новый Массив;
	
	// Получаем список пользователей.  
	// Не важно какой варинат отчета, если выбран пользователь ???????
	Если ЗначениеЗаполнено(Пользователь) Тогда //ВариантОтчета = "АктивностьПользователя" Тогда   
		
		ПользовательФильтр.Добавить(ИмяПользователяИБ(Пользователь));    
	ИначеЕсли ТипЗнч(ПользователиИГруппы) = Тип("СписокЗначений") Тогда
	
		Для Каждого Элемент Из ПользователиИГруппы Цикл
			ПользовательФильтр.Добавить(ИмяПользователяИБ(Элемент.Value));
		КонецЦикла;
	Иначе   
		
		ПользовательФильтр.Добавить(ИмяПользователяИБ(ПользователиИГруппы));	
	КонецЕсли;
	
	ДатыВЧасовомПоясеСервера = ПараметрыОтчета.ДатыВЧасовомПоясеСервера;  
	
	Если ДатыВЧасовомПоясеСервера Тогда
		СмещениеВремениСервера = 0;
	Иначе
		СмещениеВремениСервера = СмещениеВремениСервера();
	КонецЕсли;
	
	ОтборЖурналаРегистрации = Новый Структура;
	ОтборЖурналаРегистрации.Вставить("StartDate",       ДатаНачала + СмещениеВремениСервера);
	ОтборЖурналаРегистрации.Вставить("EndDate",         ДатаОкончания + СмещениеВремениСервера);
	ОтборЖурналаРегистрации.Вставить("ApplicationName", ИмяПриложения);
	ОтборЖурналаРегистрации.Вставить("Level",           Уровни);
	ОтборЖурналаРегистрации.Вставить("Event",           События);
	
	// Убираем для варианта АнализАктивностиПользователей
	Если ПользовательФильтр.Количество() = 0 Тогда
		Возврат Новый Структура("АнализАктивностиПользователей, ОдновременноСессий, ОтчетПустой", ИсходныеДанные, ОдновременноСессий, Истина);
	КонецЕсли;
	
	Если ПользовательФильтр.Найти("ВсеПользователи") = Неопределено Тогда
		ОтборЖурналаРегистрации.Вставить("Пользователь", ПользовательФильтр);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ВыгрузитьЖурналРегистрации(ДанныеЖурналаРегистрации, ОтборЖурналаРегистрации);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОтчетПустой = (ДанныеЖурналаРегистрации.Количество() = 0);
	
	ДанныеЖурналаРегистрации.Сортировать("Session, Date");
	
	// Добавляем соответствие УникальныйИдентификатор-ПользовательСсылка для дальнейшего использования.
	ИдентификаторыПользователей             = ДанныеЖурналаРегистрации.ВыгрузитьКолонку("User");
	СоответствиеИдентификаторыПользователей = УникальныеИдентификаторыПользователей(ИдентификаторыПользователей);
	
	ТекущийСеанс        = Неопределено;
	ЧасовРаботы         = 0;
	КоличествоЗапусков  = 0;
	СозданоДокументов   = 0;
	СозданоСправочников = 0;
	ИзмененоДокументов  = 0;
	ИзмененоСправочников= 0;
	ВидОбъекта          = Неопределено;
	СтрокаИсходныхДанных= Неопределено;
	НачалоСеанса        = Неопределено;
	
	// Расчет данных, необходимых для составления отчета.
	Для Каждого СтрокаДанныхЖурналаРегистрации Из ДанныеЖурналаРегистрации Цикл  
		
		СозданоДокументов       = 0;
		СозданоСправочников     = 0;
		ИзмененоДокументов      = 0;
		ИзмененоСправочников    = 0;
		СозданоБизнесПроцессов  = 0;
		ИзмененоБизнесПроцессов = 0;
		ИзмененоЗадач           = 0;
		СозданоЗадач            = 0;
		ВидОбъекта              = Неопределено;
		
		СтрокаДанныхЖурналаРегистрации.Date = СтрокаДанныхЖурналаРегистрации.Date - СмещениеВремениСервера;  
		
		Если СтрокаДанныхЖурналаРегистрации.UserName = "" Тогда
			Продолжить;
		КонецЕсли;    
		
		Сеанс = СтрокаДанныхЖурналаРегистрации.Session; 
		
		Если Не ЗначениеЗаполнено(Сеанс)
			Или Не ЗначениеЗаполнено(СтрокаДанныхЖурналаРегистрации.Date) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПользователяСсылка = СоответствиеИдентификаторыПользователей[Строка(СтрокаДанныхЖурналаРегистрации.User)];
		
		// Не нашли пользователя по UUID в РС
		Если ИмяПользователяСсылка = Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		// Расчет продолжительности работы пользователей и количества запусков программы.
		Если ТекущийСеанс <> Сеанс
			Или СтрокаДанныхЖурналаРегистрации.Event = "_$Session$_.Start" Тогда  
			
			Если СтрокаИсходныхДанных <> Неопределено Тогда
				СтрокаИсходныхДанных.ЧасовРаботы  = ЧасовРаботы;
				СтрокаИсходныхДанных.КоличествоЗапусков = КоличествоЗапусков;
			КонецЕсли;   
			
			СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
			СтрокаИсходныхДанных.Дата		  = СтрокаДанныхЖурналаРегистрации.Date;
			СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date);
			СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
			ЧасовРаботы			= 0;
			КоличествоЗапусков	= 0; 
			ТекущийСеанс		= Сеанс; 
			НачалоСеанса		= СтрокаДанныхЖурналаРегистрации.Date;
		КонецЕсли;
		
		Если СтрокаДанныхЖурналаРегистрации.Event = "_$Session$_.Finish" Тогда
			
			КоличествоЗапусков = КоличествоЗапусков + 1;
			Если НачалоСеанса <> Неопределено Тогда 
				
				// Проверяем закончился сеанс пользователя в этот же день или на следующий.
				Если BegOfDay(СтрокаДанныхЖурналаРегистрации.Date) > BegOfDay(НачалоСеанса) Тогда
					// Если окончание сеанса произошло на следующий день, то необходимо заполнить часы работы за предыдущий день.
					Разность = КонецДня(НачалоСеанса) - НачалоСеанса;
					ЧасовРаботы = Разность/60/60;
					СтрокаИсходныхДанных.ЧасовРаботы = ЧасовРаботы;
					ДеньСеанса = КонецДня(НачалоСеанса) + 86400;
					Пока КонецДня(СтрокаДанныхЖурналаРегистрации.Date) > ДеньСеанса Цикл
						СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
						СтрокаИсходныхДанных.Дата = ДеньСеанса;
						СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date);
						СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
						ЧасовРаботы = (ДеньСеанса - BegOfDay(ДеньСеанса))/60/60;
						СтрокаИсходныхДанных.ЧасовРаботы  = ЧасовРаботы;
						ДеньСеанса = ДеньСеанса + 86400;
					КонецЦикла;	
					СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
					СтрокаИсходныхДанных.Дата = СтрокаДанныхЖурналаРегистрации.Date;
					СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date);
					СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
					ЧасовРаботы = (СтрокаДанныхЖурналаРегистрации.Date - BegOfDay(ДеньСеанса))/60/60;
					СтрокаИсходныхДанных.ЧасовРаботы  = ЧасовРаботы;
				Иначе
					Разность =  (СтрокаДанныхЖурналаРегистрации.Date - НачалоСеанса)/60/60;
					ЧасовРаботы = ЧасовРаботы + Разность;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Расчет количества созданных документов и справочников.
		Если СтрокаДанныхЖурналаРегистрации.Event = "_$Data$_.New" Тогда
			
			Если СтрНайти(СтрокаДанныхЖурналаРегистрации.Metadata, "Document.") > 0 
				И ВыводитьДокументы Тогда
				ВидОбъекта = СтрокаДанныхЖурналаРегистрации.MetadataPresentation;
				ОбъектСправочникДокумент = СтрокаДанныхЖурналаРегистрации.Data;
				СозданоДокументов = СозданоДокументов + 1;
				СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
				СтрокаИсходныхДанных.Дата		  = СтрокаДанныхЖурналаРегистрации.Date;
				СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
				СтрокаИсходныхДанных.ВидОбъекта = ВидОбъекта;
				СтрокаИсходныхДанных.СозданоДокументов = СозданоДокументов;
				СтрокаИсходныхДанных.ОбъектСправочникДокумент = ОбъектСправочникДокумент;
				СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date); 
			КонецЕсли;
			
			Если СтрНайти(СтрокаДанныхЖурналаРегистрации.Metadata, "Catalog.") > 0
				И ВыводитьСправочники Тогда
				ВидОбъекта = СтрокаДанныхЖурналаРегистрации.MetadataPresentation;
				ОбъектСправочникДокумент = СтрокаДанныхЖурналаРегистрации.Data;
				СозданоСправочников = СозданоСправочников + 1;
				СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
				СтрокаИсходныхДанных.Дата		  = СтрокаДанныхЖурналаРегистрации.Date;
				СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
				СтрокаИсходныхДанных.ВидОбъекта = ВидОбъекта;
				СтрокаИсходныхДанных.СозданоСправочников = СозданоСправочников;
				СтрокаИсходныхДанных.ОбъектСправочникДокумент = ОбъектСправочникДокумент;
				СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date);
			КонецЕсли;
			
		КонецЕсли;
		
		// Расчет количества измененных документов и справочников.
		Если СтрокаДанныхЖурналаРегистрации.Event = "_$Data$_.Update" Тогда
			
			Если СтрНайти(СтрокаДанныхЖурналаРегистрации.Metadata, "Document.") > 0
				И ВыводитьДокументы Тогда
				ВидОбъекта = СтрокаДанныхЖурналаРегистрации.MetadataPresentation;
				ОбъектСправочникДокумент = СтрокаДанныхЖурналаРегистрации.Data;
				ИзмененоДокументов = ИзмененоДокументов + 1;
				СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
				СтрокаИсходныхДанных.Дата		  = СтрокаДанныхЖурналаРегистрации.Date;
				СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
				СтрокаИсходныхДанных.ИзмененоДокументов = ИзмененоДокументов;  	
				СтрокаИсходныхДанных.ВидОбъекта = ВидОбъекта;
				СтрокаИсходныхДанных.ОбъектСправочникДокумент = ОбъектСправочникДокумент;
				СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date);
			КонецЕсли;
			
			Если СтрНайти(СтрокаДанныхЖурналаРегистрации.Metadata, "Catalog.") > 0
				И ВыводитьСправочники Тогда
				ВидОбъекта = СтрокаДанныхЖурналаРегистрации.MetadataPresentation;
				ОбъектСправочникДокумент = СтрокаДанныхЖурналаРегистрации.Data;
				ИзмененоСправочников = ИзмененоСправочников + 1;
				СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
				СтрокаИсходныхДанных.Дата		  = СтрокаДанныхЖурналаРегистрации.Date;
				СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
				СтрокаИсходныхДанных.ИзмененоСправочников = ИзмененоСправочников;
				СтрокаИсходныхДанных.ВидОбъекта = ВидОбъекта;
				СтрокаИсходныхДанных.ОбъектСправочникДокумент = ОбъектСправочникДокумент;
				СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date);
			КонецЕсли;
			
		КонецЕсли;
		
		// Расчет количества созданных БизнесПроцессов и Задач.
		Если СтрокаДанныхЖурналаРегистрации.Event = "_$Data$_.New" Тогда
			    
			Если СтрНайти(СтрокаДанныхЖурналаРегистрации.Metadata, "BusinessProcess.") > 0 
				И ВыводитьБизнесПроцессы Тогда
				ВидОбъекта = СтрокаДанныхЖурналаРегистрации.MetadataPresentation;
				ОбъектСправочникДокумент = СтрокаДанныхЖурналаРегистрации.Data;
				СозданоБизнесПроцессов = СозданоБизнесПроцессов + 1;
				СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
				СтрокаИсходныхДанных.Дата		  = СтрокаДанныхЖурналаРегистрации.Date;
				СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
				СтрокаИсходныхДанных.ВидОбъекта = ВидОбъекта;
				СтрокаИсходныхДанных.СозданоБизнесПроцессов = СозданоБизнесПроцессов;
				СтрокаИсходныхДанных.ОбъектСправочникДокумент = ОбъектСправочникДокумент;
				СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date); 
			КонецЕсли;
			
			Если СтрНайти(СтрокаДанныхЖурналаРегистрации.Metadata, "Task.") > 0 
				И ВыводитьЗадачи Тогда
				ВидОбъекта = СтрокаДанныхЖурналаРегистрации.MetadataPresentation;
				ОбъектСправочникДокумент = СтрокаДанныхЖурналаРегистрации.Data;
				СозданоЗадач = СозданоЗадач + 1;
				СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
				СтрокаИсходныхДанных.Дата		  = СтрокаДанныхЖурналаРегистрации.Date;
				СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
				СтрокаИсходныхДанных.ВидОбъекта = ВидОбъекта;
				СтрокаИсходныхДанных.СозданоЗадач = СозданоЗадач;
				СтрокаИсходныхДанных.ОбъектСправочникДокумент = ОбъектСправочникДокумент;
				СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date);
			КонецЕсли;
			
		КонецЕсли;
		
		// Расчет количества измененных БизнесПроцессов и задач.
		Если СтрокаДанныхЖурналаРегистрации.Event = "_$Data$_.Update" Тогда
			
			Если СтрНайти(СтрокаДанныхЖурналаРегистрации.Metadata, "BusinessProcess.") > 0
				И ВыводитьБизнесПроцессы Тогда
				ВидОбъекта = СтрокаДанныхЖурналаРегистрации.MetadataPresentation;
				ОбъектСправочникДокумент = СтрокаДанныхЖурналаРегистрации.Data;
				ИзмененоБизнесПроцессов = ИзмененоБизнесПроцессов + 1;
				СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
				СтрокаИсходныхДанных.Дата		  = СтрокаДанныхЖурналаРегистрации.Date;
				СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
				СтрокаИсходныхДанных.ВидОбъекта = ВидОбъекта;
				СтрокаИсходныхДанных.ИзмененоБизнесПроцессов = ИзмененоБизнесПроцессов;
				СтрокаИсходныхДанных.ОбъектСправочникДокумент = ОбъектСправочникДокумент;
				СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date);
			КонецЕсли;
			
			Если СтрНайти(СтрокаДанныхЖурналаРегистрации.Metadata, "Task.") > 0 
				И ВыводитьЗадачи Тогда
				ВидОбъекта = СтрокаДанныхЖурналаРегистрации.MetadataPresentation;
				ОбъектСправочникДокумент = СтрокаДанныхЖурналаРегистрации.Data;
				ИзмененоЗадач = ИзмененоЗадач + 1;
				СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
				СтрокаИсходныхДанных.Дата		  = СтрокаДанныхЖурналаРегистрации.Date;
				СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
				СтрокаИсходныхДанных.ВидОбъекта = ВидОбъекта;
				СтрокаИсходныхДанных.ИзмененоЗадач = ИзмененоЗадач;
				СтрокаИсходныхДанных.ОбъектСправочникДокумент = ОбъектСправочникДокумент;
				СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаИсходныхДанных <> Неопределено Тогда
		
		СтрокаИсходныхДанных.ЧасовРаботы        = ЧасовРаботы;
		СтрокаИсходныхДанных.КоличествоЗапусков = КоличествоЗапусков;
	КонецЕсли;
	
	Если ВариантОтчета = "АнализАктивностиПользователей" Тогда
	
		ДанныеЖурналаРегистрации.Сортировать("Date");
		
		МассивПользователей 	             = Новый Массив;
		МаксМассивПользователей              = Новый Массив;
		ОдновременноРаботавшихПользователей  = 0;
		Счетчик                              = 0;
		ТекущаяДата                          = Неопределено;
		
		Для Каждого СтрокаДанныхЖурналаРегистрации Из ДанныеЖурналаРегистрации Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанныхЖурналаРегистрации.Date)
				Или СтрокаДанныхЖурналаРегистрации.UserName = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПользователяСсылка = СоответствиеИдентификаторыПользователей[Строка(СтрокаДанныхЖурналаРегистрации.User)]; 
			
			Если ИмяПользователяСсылка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПользователяСтрока = ИмяПользователяИБ(ИмяПользователяСсылка);
			
			ДатаОдновременноРаботавшихПользователей = НачалоДня(СтрокаДанныхЖурналаРегистрации.Date);
			
			// При смене дня обнуляем все данные по одновременным сессиям и заполняем данные за прошедший день.
			Если ТекущаяДата <> ДатаОдновременноРаботавшихПользователей Тогда    
				
				Если ОдновременноРаботавшихПользователей <> 0 Тогда 
					
					СформироватьСтрокуОдновременноСессий(ОдновременноСессий, МаксМассивПользователей, 
						ОдновременноРаботавшихПользователей, ТекущаяДата);
				КонецЕсли; 
					
				ОдновременноРаботавшихПользователей = 0;
				Счетчик    = 0;
				МассивПользователей.Очистить();
				ТекущаяДата = ДатаОдновременноРаботавшихПользователей;
			КонецЕсли;
			
			Если СтрокаДанныхЖурналаРегистрации.Event = "_$Session$_.Start" Тогда  
				
				Счетчик = Счетчик + 1;
				МассивПользователей.Добавить(ИмяПользователяСтрока);
			ИначеЕсли СтрокаДанныхЖурналаРегистрации.Event = "_$Session$_.Finish" Тогда 
				
				ИндексПользователя = МассивПользователей.Найти(ИмяПользователяСтрока);
				Если Не ИндексПользователя = Неопределено Тогда 
					МассивПользователей.Удалить(ИндексПользователя);
					Счетчик = Счетчик - 1;
				КонецЕсли;
			КонецЕсли;
			
			// Проверяем значение счетчика и сравниваем с максимальным значением.
			Счетчик = Макс(Счетчик, 0);      
			
			Если Счетчик > ОдновременноРаботавшихПользователей Тогда  
				
				МаксМассивПользователей = Новый Массив;
				Для Каждого Элемент Из МассивПользователей Цикл
					МаксМассивПользователей.Добавить(Элемент);
				КонецЦикла;
			КонецЕсли;
			
			ОдновременноРаботавшихПользователей = Макс(ОдновременноРаботавшихПользователей, Счетчик);
			
		КонецЦикла;
		
		Если ОдновременноРаботавшихПользователей <> 0 Тогда 
			
			СформироватьСтрокуОдновременноСессий(ОдновременноСессий, МаксМассивПользователей, 
				ОдновременноРаботавшихПользователей, ТекущаяДата);
		КонецЕсли;
		
		// Расчет количества ошибок и предупреждений.
		ДанныеЖурналаРегистрации = Неопределено;
		Ошибок 					 = 0;
		Предупреждений			 = 0;
		ДанныеЖурналаРегистрации = ИнформацияПоОшибкамЖурналаРегистрации(ДатаНачала, ДатаОкончания, СмещениеВремениСервера);
		
		ОтчетПустой =  ОтчетПустой Или (ДанныеЖурналаРегистрации.Количество() = 0);
		
		Для Каждого СтрокаДанныхЖурналаРегистрации Из ДанныеЖурналаРегистрации Цикл
			
			Если СтрокаДанныхЖурналаРегистрации.UserName = "" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПользовательФильтр.Найти(СтрокаДанныхЖурналаРегистрации.UserName) = Неопределено
				И ПользовательФильтр.Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПользователяСсылка = СоответствиеИдентификаторыПользователей[Строка(СтрокаДанныхЖурналаРегистрации.User)];
			
			Если ИмяПользователяСсылка = Неопределено Тогда 				
				Продолжить;
			КонецЕсли;	
			
			Если СтрокаДанныхЖурналаРегистрации.Level = УровеньЖурналаРегистрации.Ошибка Тогда    
				
				Ошибок = Ошибок + 1;
				СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
				СтрокаИсходныхДанных.Дата = СтрокаДанныхЖурналаРегистрации.Date;
				СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date);
				СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
				СтрокаИсходныхДанных.Ошибок = Ошибок;
			КонецЕсли;
			
			Если СтрокаДанныхЖурналаРегистрации.Level = УровеньЖурналаРегистрации.Предупреждение Тогда 
				
				Предупреждений = Предупреждений + 1;
				СтрокаИсходныхДанных = ИсходныеДанные.Добавить();
				СтрокаИсходныхДанных.Дата = СтрокаДанныхЖурналаРегистрации.Date;
				СтрокаИсходныхДанных.Неделя 	  = СтрокаНеделяГода(СтрокаДанныхЖурналаРегистрации.Date);
				СтрокаИсходныхДанных.Пользователь = ИмяПользователяСсылка;
				СтрокаИсходныхДанных.Предупреждений = Предупреждений;
			КонецЕсли;
			
			Ошибок         = 0;
			Предупреждений = 0;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый Структура("АнализАктивностиПользователей, ОдновременноСессий, ОтчетПустой", ИсходныеДанные, ОдновременноСессий, ОтчетПустой);
	
КонецФункции

Функция ПользователиДляАнализа(ПользовательФильтр, Элемент)
	
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.Employees") Тогда
		ИмяПользователяИБ = ИмяПользователяИБ(Элемент);
		
		Если ИмяПользователяИБ <> Неопределено Тогда
			ПользовательФильтр.Добавить(ИмяПользователяИБ);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		
		ВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
		Если Элемент = ВсеПользователи Тогда
			ПользовательФильтр.Добавить("ВсеПользователи");
			Возврат ПользовательФильтр;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Группа", Элемент);
		Запрос.Текст = 
						"SELECT
						|	InfoBaseUsers.UserUUID AS Пользователь,
						|	InfoBaseUsers.UserName AS UserName
						|FROM
						|	InformationRegister.InfoBaseUsers AS InfoBaseUsers
						//|WHERE
						//|	InfoBaseUsers.Employee = &qEmployee
						|
						|ORDER BY
						|	InfoBaseUsers.UserName,
						|	InfoBaseUsers.UserUUID";		
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Результат Цикл
			ИмяПользователяИБ = ИмяПользователяИБ(Строка.Пользователь);
			
			Если ИмяПользователяИБ <> Неопределено Тогда
				ПользовательФильтр.Добавить(ИмяПользователяИБ);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПользовательФильтр;
КонецФункции

Функция УникальныеИдентификаторыПользователей(ИдентификаторыПользователей) 
	
	МассивУникальныеИдентификаторыПользователей = Новый Массив;
	
	Для Каждого Элемент Из ИдентификаторыПользователей Цикл   
		
		Если МассивУникальныеИдентификаторыПользователей.Find(Элемент) = Неопределено Тогда
		
			МассивУникальныеИдентификаторыПользователей.Добавить(Элемент);	
		КонецЕСли;
	КонецЦикла;	
	
	СоответствиеУИД = Новый Соответствие();
	Для Каждого Элемент Из МассивУникальныеИдентификаторыПользователей Цикл
		
		Если ЗначениеЗаполнено(Элемент) Тогда   
			
			//Пользователь = Справочники.Employees.ПолучитьСсылку(Элемент);
			
			ДанныеП = ПолучитьДанныеПользователя(Строка(Элемент));
			//ИдентификаторПользователяИБ = ИмяПользователяСсылка.ИдентификаторПользователяИБ;
			
			ИдентификаторПользователяИБ = ДанныеП.Ид;	
			ИмяПользователяСсылка       = ДанныеП.ИмяПользователя;
			
			Если ИдентификаторПользователяИБ <> Неопределено Тогда
				СоответствиеУИД.Вставить(ИдентификаторПользователяИБ, ИмяПользователяСсылка);
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СоответствиеУИД;  
	
КонецФункции

Функция ПользовательСсылка(ПользовательУИД)    
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
				"SELECT
				|	InfoBaseUsers.UserUUID AS UserUUID,
				|	InfoBaseUsers.Employee AS Employee
				|FROM
				|	InformationRegister.InfoBaseUsers AS InfoBaseUsers
				|WHERE
				|	InfoBaseUsers.UserUUID = &UserUUID
				|
				|ORDER BY
				|	InfoBaseUsers.Employee,
				|	InfoBaseUsers.UserUUID";
	
    Запрос.УстановитьПараметр("UserUUID", Строка(ПользовательУИД));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Employee;   
	
КонецФункции

Функция СтрокаНеделяГода(ДатаГода)   
	
	СтрокаНеделя = НСтр("ru = 'Неделя '") + Строка(WeekOfYear(ДатаГода));
	
	Возврат СтрокаНеделя;       
	
КонецФункции


Процедура СформироватьСтрокуОдновременноСессий(ОдновременноСессий, МаксМассивПользователей,
			ОдновременноРаботавшихПользователей, ТекущаяДата)
	
	ВременныйМассив = Новый Массив;
	Индекс = 0;
	Для Каждого Элемент Из МаксМассивПользователей Цикл
		ВременныйМассив.Вставить(Индекс, Элемент);
		СчетчикКоличестваСеансовПользователя = 0;
		
		Для Каждого ИмяПользователя Из ВременныйМассив Цикл
			Если ИмяПользователя = Элемент Тогда 
				
				СчетчикКоличестваСеансовПользователя = СчетчикКоличестваСеансовПользователя + 1;
				ПользовательИНомер = "" + Элемент + " (" + СчетчикКоличестваСеансовПользователя + ")";		
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТаблицы = ОдновременноСессий.Добавить();
		СтрокаТаблицы.ДатаОдновременноРаботавшихПользователей = ТекущаяДата;
		СтрокаТаблицы.ОдновременноРаботавшихПользователей = ОдновременноРаботавшихПользователей;
		СтрокаТаблицы.СписокОдновременноРаботавшихПользователей = ПользовательИНомер;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеПользователя(UserUUID)  
	
	ДанныеП = Новый Структура("ИмяПользователя, Ид", "", Неопределено);
	
	vQry      = New Query();
	vQry.Text = 
	"SELECT
	|	InfoBaseUsers.UserUUID AS Ид,
	|	InfoBaseUsers.UserName AS ИмяПользователя
	|FROM
	|	InformationRegister.InfoBaseUsers AS InfoBaseUsers
	|WHERE
	|	InfoBaseUsers.UserUUID = &UserUUID
	|
	|ORDER BY
	|	InfoBaseUsers.UserName,
	|	InfoBaseUsers.UserUUID";
	vQry.SetParameter("UserUUID", UserUUID);
	
	Результат = vQry.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеП, Выборка);
	КонецЕСли;
	
	Возврат ДанныеП;
	
КонецФункции	

Функция СмещениеВремениСервера()  
	
	СмещениеВремениСервера = ТекущаяДата() - ТекущаяДатаСеанса(); // АПК:143 Требуется дата компьютера  
	
	Если СмещениеВремениСервера >= -1 И СмещениеВремениСервера <= 1 Тогда  
		
		СмещениеВремениСервера = 0;
	КонецЕсли;  
	
	Возврат СмещениеВремениСервера;
	
КонецФункции	

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли