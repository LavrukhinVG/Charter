
&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Подрядчик) Тогда 
		Сообщить("Для корректного формирования отчета нужно выбрать Подрядчика!");
		Возврат;
	КонецЕсли;	
	
	ТабДокДляПечати = Неопределено;
	
	СоответвиеТабДок = Новый Соответствие; 
	
	ТЗ_Итоговая = Новый ТаблицаЗначений;
	
	ТЗ_Итоговая.Колонки.Добавить("Организация");
	ТЗ_Итоговая.Колонки.Добавить("Дом");
	ТЗ_Итоговая.Колонки.Добавить("Всего");
	ТЗ_Итоговая.Колонки.Добавить("Занято");
	ТЗ_Итоговая.Колонки.Добавить("Номер");
	
	ТабДок.Очистить();
	
	Макет = Отчеты.СправкаБКАЭ.ПолучитьМакет("Макет");
		
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ДатаОтчета = Формат(ДатаОтчета, "ДФ='dd.MM.yyyy ""г.""'");
	ТабДок.Вывести(Область);
	
	Hotel = SessionParameters.CurrentHotel;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расш1_НомерныеФонды.Ссылка КАК НомернойФонд
	|ПОМЕСТИТЬ ВТ_НомерныеФонды
	|ИЗ
	|	Справочник.Расш1_НомерныеФонды КАК Расш1_НомерныеФонды
	|ГДЕ
	|	НЕ Расш1_НомерныеФонды.ПометкаУдаления
	|	И Расш1_НомерныеФонды.ПоказыватьВСпрвкеБКАЭ
	|	И Расш1_НомерныеФонды.Ref = &qПодрядчик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;	
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|RoomInventoryBalance.Hotel AS Hotel,
	|RoomInventoryBalance.Room AS Room,
	|1 как Всего
	|INTO RoomInventoryBalance
	|FROM
	|	AccumulationRegister.RoomInventory.Balance(
	|			&qDate,
	|			TRUE
	|				AND Hotel = &qHotel) AS RoomInventoryBalance
	|WHERE
	|	ISNULL(RoomInventoryBalance.TotalRoomsBalance, 0) > 0
	|;	
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	ResDocuments.Recorder AS Accommodation,
	|	ResDocuments.Room AS Room,
	|	1 как Занят
	|INTO ResDocuments
	|FROM
	|	AccumulationRegister.RoomInventory AS ResDocuments
	|WHERE
	|	ResDocuments.PeriodFrom < &qPeriodTo
	|	AND ResDocuments.PeriodTo > &qPeriodFrom
	|	AND ResDocuments.Hotel = &qHotel
	|	AND ResDocuments.RecordType = &qExpense
	|	AND (ResDocuments.IsAccommodation
	|			OR ResDocuments.IsReservation)
	|
	|GROUP BY
	|	ResDocuments.Recorder,
	|	ResDocuments.Room
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT ALLOWED
	|	RoomInventoryBalance.Hotel AS Hotel,
	|	RoomInventoryBalance.Room AS Room,
	|	Documents.Accommodation AS Accommodation,
	|	Documents.Accommodation.Guest AS Guest,
	|	Выбор когда RoomInventoryBalance.Room.НеУчитыватьВСправке тогда 0 иначе  RoomInventoryBalance.всего конец как Всего,
	|	Documents.Занят как Занят
	|INTO Accommodations
	|FROM
	|	RoomInventoryBalance AS RoomInventoryBalance
	|		LEFT JOIN ResDocuments AS Documents
	|		ON RoomInventoryBalance.Room = Documents.Room
	|		внутреннее соединение InformationRegister.Расш1_СоставНомерногоФонда AS Расш1_СоставНомерногоФонда
	|		ON RoomInventoryBalance.Room = Расш1_СоставНомерногоФонда.Номер
	|       и (Расш1_СоставНомерногоФонда.НомернойФонд в (Выбрать ВТ_НомерныеФонды.НомернойФонд из ВТ_НомерныеФонды как ВТ_НомерныеФонды)
	|			или Расш1_СоставНомерногоФонда.НомернойФонд = Значение(Справочник.Расш1_НомерныеФонды.ПустаяСсылка))
	|WHERE
	|	НЕ RoomInventoryBalance.Room.IsVirtual
	|
	|GROUP BY
	|	RoomInventoryBalance.Hotel,
	|	RoomInventoryBalance.Room,
	|	Documents.Accommodation,
	|	Documents.Accommodation.Guest,
	|	RoomInventoryBalance.Всего,
	|	Documents.Занят
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|SELECT
	|	Accommodations.Room AS Room,
	|	ISNULL(Accommodations.Room.Description, """") AS RoomDescription,
	|	Accommodations.Room.ЭтажностьДома AS ЭтажностьДома,
	|	Accommodations.Room.КоличествоКвартир AS КоличествоКвартир,
	|	Расш1_СоставНомерногоФонда.НомернойФонд.Ref AS Организация,
	|	Accommodations.Room.НомерКвартиры AS Квартира,
	|	Accommodations.Room.SortCode AS RoomSortCode,
	|	Accommodations.Guest.FullName AS СотрудникПолноеИмя,
	|	Accommodations.Guest.Position AS Должность,
	|	Accommodations.Guest.ПолноеИмяEng AS СотрудникПолноеИмяEng,
	|	Accommodations.Guest.Sex AS Пол,
	|	Isnull(Accommodations.Занят, 0) AS Занят,
	|	isnull(Accommodations.всего, 0) AS Всего
	|FROM
	|	Accommodations AS Accommodations
	|		LEFT JOIN InformationRegister.Расш1_СоставНомерногоФонда AS Расш1_СоставНомерногоФонда
	|		ON Accommodations.Room = Расш1_СоставНомерногоФонда.Номер
	|WHERE
	|	Расш1_СоставНомерногоФонда.НомернойФонд = &qПодрядчик
	|ORDER BY
	|	RoomSortCode
	|TOTALS 
	|SUM(Занят),
	|SUM(всего)
	|BY
	|	Room ONLY HIERARCHY";
	
	Запрос.УстановитьПараметр("qHotel", Hotel);
	Запрос.УстановитьПараметр("qDate", КонецДня(ДатаОтчета));
	Запрос.УстановитьПараметр("qPeriodTo", КонецДня(ДатаОтчета));
	Запрос.УстановитьПараметр("qPeriodFrom", КонецДня(ДатаОтчета));
	Запрос.УстановитьПараметр("qExpense", AccumulationRecordType.Expense);
	Запрос.УстановитьПараметр("qПодрядчик", Подрядчик);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаГруппировка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	Пока ВыборкаГруппировка.Следующий() Цикл
		
		ТД = Новый ТабличныйДокумент;
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.ДатаОтчета = Формат(ДатаОтчета, "ДФ='dd.MM.yyyy ""г.""'");
		ТД.Вывести(Область);

		НомерПоПорядку = 1;
		
		Область = Макет.ПолучитьОбласть("Дом");
		Область.Параметры.НомерДома = ВыборкаГруппировка.Room;
		
		ТабДок.Вывести(Область, 1);
		ТД.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ЗаголовокДом");
		ТабДок.Вывести(Область, 2);
		ТД.Вывести(Область);
		
		Выборка = ВыборкаГруппировка.Выбрать();
		
		НомерКвартиры = "";
		
		НачальнаяСтрока = ТабДок.ВысотаТаблицы + 1;
		НачальнаяСтрокаТД = ТД.ВысотаТаблицы + 1;
		
		Пока Выборка.Следующий() Цикл
			
			Если НомерКвартиры <> "" Тогда
				
				Если НомерКвартиры <> Выборка.Квартира Тогда
					
					КонечнаяСтрока = ТабДок.ВысотаТаблицы;
					КонечнаяСтрокаТД = ТД.ВысотаТаблицы;
					
					ТабДок.Область("R"+Формат(НачальнаяСтрока,"NG=")+"C2:R"+Формат(КонечнаяСтрока,"NG=") +"C2").Объединить();
					ТабДок.Область("R"+Формат(НачальнаяСтрока,"NG=")+"C3:R"+Формат(КонечнаяСтрока,"NG=")+"C3").Объединить();
					
					ТД.Область("R"+Формат(НачальнаяСтрокаТД,"NG=")+"C2:R"+Формат(КонечнаяСтрокаТД,"NG=")+"C2").Объединить();
					ТД.Область("R"+Формат(НачальнаяСтрокаТД,"NG=")+"C3:R"+Формат(КонечнаяСтрокаТД,"NG=")+"C3").Объединить();
					
					НачальнаяСтрока = ТабДок.ВысотаТаблицы + 1;
					НачальнаяСтрокаТД = ТД.ВысотаТаблицы + 1;
					
					НомерКвартиры = Выборка.Квартира;
					
				КонецЕсли;
			Иначе
				НомерКвартиры = Выборка.Квартира;
			КонецЕсли;
			
			НаименованиеКомнаты = Выборка.RoomDescription;
			Индекс = СтрНайти(НаименованиеКомнаты, "комн.");
			
			Если Индекс = 0 Тогда
				Индекс = СтрНайти(НаименованиеКомнаты, "Комн.");
			КонецЕсли;
			
			Если Индекс > 0 Тогда
				Комната = Прав(НаименованиеКомнаты, СтрДлина(НаименованиеКомнаты) - Индекс + 1);
			Иначе
				Комната = НаименованиеКомнаты;
			КонецЕсли;
			
			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Номер = НомерПоПорядку;
			Область.Параметры.Организация = Выборка.Организация;
			Область.Параметры.Квартира = Выборка.Квартира;
			Область.Параметры.Комната = Комната;
			//Область.Параметры.Комната = Выборка.Room;
			Область.Параметры.Сотрудник = Выборка.СотрудникПолноеИмя;
			Область.Параметры.СотрудникАнгл = Выборка.СотрудникПолноеИмяEng;
			Область.Параметры.Должность = Выборка.Должность;
			Область.Параметры.Пол = Выборка.Пол;
			
			НомерПоПорядку = НомерПоПорядку + 1;
			
			ТабДок.Вывести(Область, 2);
			ТД.Вывести(Область);
			
			НоваяСтрока = ТЗ_Итоговая.Добавить();
			НоваяСтрока.Организация = Выборка.Организация;
			НоваяСтрока.Дом = ВыборкаГруппировка.Room;
			НоваяСтрока.Всего = Выборка.Всего;
			НоваяСтрока.Занято = Выборка.Занят;
			НоваяСтрока.Номер = Выборка.Room;
			
		КонецЦикла;
		
		ТабДок.Область("R"+Формат(НачальнаяСтрока,"NG=")+"C2:R"+Формат(ТабДок.ВысотаТаблицы,"NG=")+"C2").Объединить();
		ТабДок.Область("R"+Формат(НачальнаяСтрока,"NG=")+"C3:R"+Формат(ТабДок.ВысотаТаблицы,"NG=")+"C3").Объединить();
		
		ТД.Область("R"+Формат(НачальнаяСтрокаТД,"NG=")+"C2:R"+Формат(ТД.ВысотаТаблицы,"NG=")+"C2").Объединить();
		ТД.Область("R"+Формат(НачальнаяСтрокаТД,"NG=")+"C3:R"+Формат(ТД.ВысотаТаблицы,"NG=")+"C3").Объединить();
		
		СоответвиеТабДок.Вставить(ВыборкаГруппировка.Room.Description, ТД);
		
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьГруппировки = Истина;
	ТабДок.ПоказатьУровеньГруппировокСтрок(0);
	
	///////////////////////// Итог
	
	ТЗ_Итоговая.Свернуть("Организация, Дом,  Номер", "Всего, Занято");
	
	Для Каждого Строка Из ТЗ_Итоговая Цикл
		
		Если Строка.Всего > 1 Тогда
			Строка.Всего  = 1;	
		КонецЕсли;
		
	КонецЦикла;
	
	ТЗ_Итоговая.Свернуть("Организация, Дом", "Всего, Занято");
	
	ТабДокНовый = Новый ТабличныйДокумент;
	
	Макет = Отчеты.СправкаБКАЭ.ПолучитьМакет("МакетИтого1");

	Область = Макет.ПолучитьОбласть("ЗаголовокИтого");
	Область.Параметры.ДатаОтчета = Формат(ДатаОтчета, "ДФ='dd.MM.yyyy ""г.""'");
	ТабДокНовый.Вывести(Область);
	
	ВыборкаГруппировка.Сбросить();
	ВыборкаГруппировка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачальнаяСтрока = ТабДокНовый.ВысотаТаблицы + 1;
	
	Область = Макет.ПолучитьОбласть("Шапка|Общая");
	ТабДокНовый.Вывести(Область);
	
	НомерКолонкиНачало = ТабДокНовый.ШиринаТаблицы + 1;
	
	Пока ВыборкаГруппировка.Следующий() Цикл
		
		ОбластьШапкаКолонки = Макет.ПолучитьОбласть("Шапка|Дом");
		ОбластьШапкаКолонки.Параметры.Дом = ВыборкаГруппировка.Room;
	
		ТабДокНовый.Присоединить(ОбластьШапкаКолонки);
		
	КонецЦикла;
	
	НомерКолонкиКонец = ТабДокНовый.ШиринаТаблицы;
	ТабДокНовый.Область("R"+Формат(НачальнаяСтрока,"NG=")+"C" + НомерКолонкиНачало + ":R"+Формат(НачальнаяСтрока,"NG=")+"C" + НомерКолонкиКонец).Объединить();
	
	ОбластьШапкаКолонки = Макет.ПолучитьОбласть("Шапка|Всего");
	ТабДокНовый.Присоединить(ОбластьШапкаКолонки);
	
	ТЗ_Организации = ТЗ_Итоговая.Скопировать();
	ТЗ_Организации.Свернуть("Организация", "Всего, Занято");
	
	Номер = 1;
	
	Для Каждого Организация Из ТЗ_Организации Цикл
		
		Область = Макет.ПолучитьОбласть("Строка|Общая");
		Область.Параметры.Субподрядчик = Организация.Организация;
		Область.Параметры.Номер = Номер;
		ТабДокНовый.Вывести(Область);
		
		ВыборкаГруппировка.Сбросить();
		ВыборкаГруппировка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаГруппировка.Следующий() Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", Организация.Организация);
			Отбор.Вставить("Дом", ВыборкаГруппировка.Room);
			
			Строки = ТЗ_Итоговая.НайтиСтроки(Отбор);
			
			Всего = 0;
			Занято = 0;
			
			Для каждого НайденнаяСтрока Из  Строки Цикл
				 Всего = Всего + НайденнаяСтрока.Всего;
				 Занято = Занято + НайденнаяСтрока.Занято;
			КонецЦикла;
		
			ОбластьСтрокаКолонки = Макет.ПолучитьОбласть("Строка|Дом");
			
			Если Строки.Количество() > 0 Тогда
				ОбластьСтрокаКолонки.Параметры.Всего = Всего;
				ОбластьСтрокаКолонки.Параметры.Занято = ?(Занято > 0, Занято, ?(Всего > 0, "0", Занято));
				ОбластьСтрокаКолонки.Параметры.Процент = ?(Всего = 0, 0, (Занято / Всего) * 100);
			КонецЕсли;
				
			ТабДокНовый.Присоединить(ОбластьСтрокаКолонки);
			
		КонецЦикла;
		
		ОбластьСтрокаКолонки = Макет.ПолучитьОбласть("Строка|Всего");
		ОбластьСтрокаКолонки.Параметры.Всего = Организация.Всего;
		ОбластьСтрокаКолонки.Параметры.Занято = ?(Организация.Занято > 0, Организация.Занято, ?(Организация.Всего > 0, "0", Организация.Занято));
		ОбластьСтрокаКолонки.Параметры.Процент = ?(Организация.Всего = 0, 0, (Организация.Занято / Организация.Всего) * 100);
		ТабДокНовый.Присоединить(ОбластьСтрокаКолонки);
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
	ОбластьСтрокаКолонки = Макет.ПолучитьОбласть("Итого|Общая");
	ТабДокНовый.Вывести(ОбластьСтрокаКолонки);
	
	ВыборкаГруппировка.Сбросить();
	ВыборкаГруппировка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Всего = 0;
	Занято = 0;
	
	ТЗ_Дома = ТЗ_Итоговая.Скопировать();//
	ТЗ_Дома.Свернуть("Дом", "Всего, Занято");//
	
	Пока ВыборкаГруппировка.Следующий() Цикл
		
		Отбор = Новый Структура;//
		Отбор.Вставить("Дом", ВыборкаГруппировка.Room);//	
		Строки = ТЗ_Дома.НайтиСтроки(Отбор);
		
		Область = Макет.ПолучитьОбласть("Итого|Дом");
		
		Если Строки.Количество() > 0 Тогда
			Область.Параметры.Всего = Строки[0].Всего;
			Область.Параметры.Занято = Строки[0].Занято;
			Область.Параметры.Процент = ?(Строки[0].Всего=0, 0, Строки[0].Занято/Строки[0].Всего * 100);
			
			Всего = Всего + Строки[0].Всего;
			Занято = Занято +  Строки[0].Занято;
		КонецЕсли;	
		
		//Область.Параметры.Всего = ВыборкаГруппировка.Всего;
		//Область.Параметры.Занято = ВыборкаГруппировка.Занят;
		//Область.Параметры.Процент = ?(ВыборкаГруппировка.Всего=0, 0, ВыборкаГруппировка.Занят/ВыборкаГруппировка.Всего * 100);
		ТабДокНовый.Присоединить(Область);
		
		//Всего = Всего + ВыборкаГруппировка.Всего;
		//Занято = Занято +  ВыборкаГруппировка.Занят;

	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Итого|Всего");
	Область.Параметры.Всего = Всего;
	Область.Параметры.Занято = ?(Занято > 0, Занято, ?(Всего > 0, "0", Занято));
	Область.Параметры.Процент = ?(Всего = 0, 0, (Занято / Всего) * 100);
	ТабДокНовый.Присоединить(Область);
	
	Область = Макет.ПолучитьОбласть("Подвал|Общая");
	ТабДокНовый.Вывести(Область);
	
	
	ВыборкаГруппировка.Сбросить();
	ВыборкаГруппировка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВсегоКомнат = 0;
	ВсегоКвартир = 0;
	
	Пока ВыборкаГруппировка.Следующий() Цикл
		
		Область = Макет.ПолучитьОбласть("Подвал|Дом");
		
		Отбор = Новый Структура;//
		Отбор.Вставить("Дом", ВыборкаГруппировка.Room);//	
		Строки = ТЗ_Дома.НайтиСтроки(Отбор);
			
		Если Строки.Количество() > 0 Тогда
			Область.Параметры.ВсегоКомнат = Строки[0].Всего;	
			ВсегоКомнат = ВсегоКомнат + Строки[0].Всего;
		КонецЕсли;
		
		Область.Параметры.ВсегоКвартир = ВыборкаГруппировка.КоличествоКвартир;
		Область.Параметры.ВсегоЭтажей = ВыборкаГруппировка.ЭтажностьДома;
		//Область.Параметры.ВсегоКомнат = ВыборкаГруппировка.Всего;
				
		ТабДокНовый.Присоединить(Область);
		
		//ВсегоКомнат = ВсегоКомнат + ВыборкаГруппировка.Всего;
		ВсегоКвартир = ВсегоКвартир + ВыборкаГруппировка.КоличествоКвартир;
		
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал|Всего");
	Область.Параметры.ВсегоКвартир = ВсегоКвартир;
	Область.Параметры.ВсегоКомнат = ВсегоКомнат;
	
	ТабДокНовый.Присоединить(Область);
	
	СоответвиеТабДок.Вставить("Свод", ТабДокНовый);
	
	ТабДокДляПечати = Новый ФиксированноеСоответствие(СоответвиеТабДок);

	ДобавитьТабдок(ТабДок, ТабДокНовый);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДатаОтчета = КонецДня(ТекущаяДата());
КонецПроцедуры

&НаСервере
Процедура ДобавитьТабдок(ТДПриемник, ТДИсточник)
	
	ТДИсточник.Область(1,1,ТДИсточник.ВысотаТаблицы,
	ТДИсточник.ШиринаТаблицы).СоздатьФорматСтрок();
	ТДПриемник.Вывести(ТДИсточник);
		
КонецПроцедуры


&НаКлиенте
Процедура SaveAsXLSX(Команда)
	
	Если ТабДокДляПечати = Неопределено Тогда
		ПоказатьПредупреждение(, "Необходимо сформировать отчет");
		Возврат;
	КонецЕсли;
	
	vFilePath = GetFileName();
	vFileType = SpreadsheetDocumentFileType.XLSX;
	SaveSpreadsheetToFile(vFileType, vFilePath);

КонецПроцедуры

&AtServer 
Function GetFileName()
	vFilePath = StrReplace(cmGetValidFileName(cmNStr(TrimAll("Заполненность номеров"))), " ", "_") + "_" + Format(CurrentDate(),"ДФ=dd.MM.yyyy");
	Return vFilePath;
EndFunction //GetFileName

&НаКлиенте
Function SaveSpreadsheetToFile(pFileType, pFilePath) Export
	vFileDlg = New FileDialog(FileDialogMode.Save);
	vFileDlg.FullFileName = pFilePath;
	vFileDlg.Multiselect = False;
	vFileDlg.Preview = False;
	vFileDlg.Title = NStr("en='Save to file';ru='Сохранить в файл';de='in Datei speichern'");
	If pFileType = SpreadsheetDocumentFileType.MXL Then
		vFileDlg.DefaultExt = "mxl";
		vFileDlg.Filter = NStr("en='1C spreadsheet format (*.mxl)|*.mxl';ru='Формат таблицы 1C (*.mxl)|*.mxl';de='Format der Tabelle 1C (*.mxl)|*.mxl'");
	ElsIf pFileType = SpreadsheetDocumentFileType.XLSX Then
		vFileDlg.DefaultExt = "xlsx";
		vFileDlg.Filter = NStr("en='Microsoft Excel format (*.xlsx)|*.xlsx';ru='Формат Microsoft Excel (*.xlsx)|*.xlsx';de='Format Microsoft Excel (*.xlsx)|*.xlsx'");
	ElsIf pFileType = SpreadsheetDocumentFileType.HTML Then
		vFileDlg.DefaultExt = "html";
		vFileDlg.Filter = NStr("en='HTML format (*.html)|*.html';ru='Формат HTML (*.html)|*.html';de='Format HTML (*.html)|*.html'");
	ElsIf pFileType = SpreadsheetDocumentFileType.PDF Then
		vFileDlg.DefaultExt = "pdf";
		vFileDlg.Filter = NStr("en='Adobe Reader PDF format (*.pdf)|*.pdf';ru='Формат Adobe Reader PDF (*.pdf)|*.pdf';de='Format Adobe Reader PDF (*.pdf)|*.pdf'");
	Else
		Return False;
	EndIf;
	vNotifity = new NotifyDescription("SelectFileEnd", ЭтотОбъект);
	vFileDlg.Show(vNotifity);
EndFunction //SaveSpreadsheetToFile

//-----------------------------------------------------------------------------
&НаКлиенте
Procedure SelectFileEnd(pSelectedItem, pAdditionalParameters) Export
	
	If pSelectedItem = Undefined Then
		Возврат;	
	EndIf;
	
	СписокОбластей = Новый СписокЗначений;
	
	Для каждого КлючЗначение Из ТабДокДляПечати Цикл
		
		ПредставлениеОбласти = КлючЗначение.Ключ;
		
		ВхождениеПервойСкобки = СтрНайти(ПредставлениеОбласти,"(");

		Если ВхождениеПервойСкобки > 0 Тогда
			ПредставлениеОбласти = Лев(ПредставлениеОбласти, ВхождениеПервойСкобки -1);
		КонецЕсли;
		
		Попытка 
			ПредставлениеОбласти = Число(ПредставлениеОбласти);
		Исключение
			
		КонецПопытки;

		СписокОбластей.Добавить(ПредставлениеОбласти, КлючЗначение.Ключ);
		
	КонецЦикла;	
	
	СписокОбластей.СортироватьПоЗначению();
	
	Пакет = Новый ПакетОтображаемыхДокументов;
	
	Для Каждого Область Из СписокОбластей Цикл
		
		ЭлементПакета = Пакет.Состав.Добавить();
		ЭлементПакета.Наименование = Область.Представление;
		ЭлементПакета.Данные = ПоместитьВоВременноеХранилище(ТабДокДляПечати.Получить(Область.Представление));
		
	КонецЦикла;	
		
	Попытка
		
		Пакет.Записать(pSelectedItem[0], ТипФайлаПакетаОтображаемыхДокументов.XLSX);
		ПоказатьПредупреждение(, "Файл выгружен в " + pSelectedItem[0]);
		ЗапуститьПриложение(pSelectedItem[0]);
		
	Исключение
		
		ПоказатьПредупреждение(,"Ошибка выгрузки в " + pSelectedItem[0]);
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;
	
EndProcedure //SelectFileEnd

&AtClient
Procedure SendByEMail(pCommand)
	
	Если ТабДокДляПечати = Неопределено Тогда
		ПоказатьПредупреждение(, "Необходимо сформировать отчет");
		Возврат;
	КонецЕсли;
	
	vParams = GenerateParametersByEMail();
	
	Если vParams.Свойство("Ошибка") Тогда
		ПоказатьПредупреждение(, vParams.Ошибка);
		Возврат;
	КонецЕсли;
	
	OpenForm("CommonForm.tcSendMail", vParams, ThisForm, ThisForm.UUID);
	
EndProcedure //SendByEMail

&AtServer
Function GenerateParametersByEMail()
	
	vFileName = GetFileName();
	vFilePath = cmGetFullFileName(vFileName, TempFilesDir()) + ".XLSX";
	vFileType = SpreadsheetDocumentFileType.XLSX;
	
	Пакет = Новый ПакетОтображаемыхДокументов;	
	
	СписокОбластей = Новый СписокЗначений;
	
	Для каждого КлючЗначение Из ТабДокДляПечати Цикл
		
		ПредставлениеОбласти = КлючЗначение.Ключ;
		
		ВхождениеПервойСкобки = СтрНайти(ПредставлениеОбласти,"(");

		Если ВхождениеПервойСкобки > 0 Тогда
			ПредставлениеОбласти = Лев(ПредставлениеОбласти, ВхождениеПервойСкобки -1);
		КонецЕсли;
		
		Попытка 
			ПредставлениеОбласти = Число(ПредставлениеОбласти);
		Исключение		
		КонецПопытки;

		СписокОбластей.Добавить(ПредставлениеОбласти, КлючЗначение.Ключ);
		
	КонецЦикла;	
	
	СписокОбластей.СортироватьПоЗначению();
	
	Для Каждого Область Из СписокОбластей Цикл
		
		ЭлементПакета = Пакет.Состав.Добавить();
		ЭлементПакета.Наименование = Область.Представление;
		ЭлементПакета.Данные = ПоместитьВоВременноеХранилище(ТабДокДляПечати.Получить(Область.Представление));
		
	КонецЦикла;
	
	Ошибка = "";
	
	Попытка		
		Пакет.Записать(vFilePath, ТипФайлаПакетаОтображаемыхДокументов.XLSX);	
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;	
	
	MessageSubject = vFileName;
	
	Пользователь = SessionParameters.CurrentUser;
	EMailList = Новый СписокЗначений;
	EMailList.Добавить(Пользователь.EMail);
	vParams = New Structure();
	vParams.Insert("SelMessageSubject", MessageSubject);
	vParams.Insert("SelEMails", "");
	vParams.Insert("SelToList", EMailList);
	
	vFile = New Structure();
	vFile.Insert("FileName", cmGetValidFileName(MessageSubject)+".XLSX");
	vFile.Insert("FullFileNameAtClient", "");
	vFile.Insert("FullFileNameAtServer", vFilePath);
	vFile.Insert("CheckRemoveAtClient",  False);
	vFile.Insert("CheckRemoveAtServer", True);
	vParams.Insert("SelFile", vFile);
	vParams.Insert("SelSenderName", "");
	
	Если Не ПустаяСтрока(Ошибка) Тогда
		vParams.Вставить("Ошибка", Ошибка);
	КонецЕсли;
	
	Return vParams;
	
EndFunction 
