#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	 
	 ОткрытьВыборРейса();
	 
 КонецПроцедуры

 &НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененияСпискаРегистрации" Тогда
		Элементы.Список.Обновить();
		ОбновитьСчетчикПассажиров();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки, ИспользуютсяСтандартныеНастройки)
	 
	ОтборСтрокой = "";
	Запятая = "";
	
	Для каждого ЭлементОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли;
		ОтборСтрокой = ОтборСтрокой + Запятая + ЭлементОтбора.ПредставлениеПользовательскойНастройки 
																				+ ЭлементОтбора.Представление;
		Запятая = "; ";
	КонецЦикла;	
	 
 КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьРейс(Команда)

	ОткрытьВыборРейса();	
	
КонецПроцедуры   

&НаКлиенте
Процедура УдалитьЗаписьСотрудника(Команда)
	
    ДокументРегистрации = Элементы.Список.ТекущаяСтрока;  
	
	Если ДокументРегистрации = Неопределено Тогда
		ПоказатьПредупреждение( , "Не выбран сотрудник из списка для удаления записи!");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ВыбраннаяЗапись", ДокументРегистрации); 
	
	ОбработчикВопроса = Новый ОписаниеОповещения("ПродолжитьВыполнениеПОслеОтветаНаВопросУдалить"
																			, ЭтотОбъект, ДополнительныеПараметры);		
	ПоказатьВопрос(ОбработчикВопроса, "Изменить запись сотрудника на борт?", РежимДиалогаВопрос.ДаНет); 
    	
КонецПроцедуры

&НаКлиенте
Процедура ПереносРейса(Команда)
	
	Если чартеры_ОбщиеПроцедурыИФункцииСервер.ЕстьБронь(Элементы.Список.ТекущиеДанные.рейс		
															, Элементы.Список.ТекущиеДанные.сотрудник) Тогда
		чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю("У выбранного сотрудника есть активная бронь
																| для продолжения необходимо сначала ее аннулировать.");														
		Возврат;
	КонецЕсли; 
	
	ОбъектРегистрации = Элементы.Список.ТекущаяСтрока;	
		
	ПараметрыПереноса = Новый Структура;	
	ПараметрыПереноса.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ПараметрыПереноса.Вставить("ДокументРегистрации", ОбъектРегистрации);
	ПараметрыПереноса.Вставить("ИсходныйРейс", Элементы.Список.ТекущиеДанные.Рейс);
	ПараметрыПереноса.Вставить("Сотрудник", Элементы.Список.ТекущиеДанные.Сотрудник);
	ПараметрыПереноса.Вставить("ТабельныйНомер", Элементы.Список.ТекущиеДанные.ТабельныйНомер);
	
	ОткрытьФорму("Документ.чартер_ПереносБорта.Форма.ФормаДокумента", ПараметрыПереноса);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписки(Команда)
	
	ПараметрыДляЗагрузки = Новый Структура("Рейс", ОтборВыбранныйРейс);	
	ОткрытьФорму("Обработка.чартер_ОбновлениеСписковИзВнешнегоФайла.Форма", ПараметрыДляЗагрузки , , , , , 
																	, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСписокАрхивногоБорта(Команда)
	
	ВыгрузитьСписокАрхивногоБортаНаСервере();
	
	ПараметрыПечатнойФормы = Новый Структура("ТабличныйДокумент", ШаблонВыгрузки);
	ПараметрыПечатнойФормы.Вставить("Заголовок", "Шаблон выгрузки рейса: " +  ОтборВыбранныйРейс);        	
	ОткрытьФорму("ОбщаяФорма.чартер_ПросмотрПечатнойФормы", ПараметрыПечатнойФормы, ЭтотОбъект, , , , 
																, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	 
 КонецПроцедуры

&НаКлиенте
Процедура РаспечататьБилет(Команда)
     
   ВыгрузитьДанныеБронированияНаСервере();  
    
   ПараметрыПечатнойФормы = Новый Структура("ТабличныйДокумент", ШаблонБилета);
   ПараметрыПечатнойФормы.Вставить("Заголовок", "Билет на рейс: " +  ОтборВыбранныйРейс);        	
   ОткрытьФорму("ОбщаяФорма.чартер_ПросмотрПечатнойФормы", ПараметрыПечатнойФормы, ЭтотОбъект, , , , 
   																	, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
 
&НаКлиенте
Процедура РаспечататьПосадочныеТалоны(Команда)
	
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Рейс", ОтборВыбранныйРейс);		
			
		ВыгрузитьВесьСписокПосадочныхТалонов(СтруктураПараметров);
		
		ПараметрыПечатнойФормы = Новый Структура("ТабличныйДокумент", ШаблонБилета);
		ПараметрыПечатнойФормы.Вставить("Заголовок", "Посадочные талоны на рейс: " +  ОтборВыбранныйРейс);        	
		ОткрытьФорму("ОбщаяФорма.чартер_ПросмотрПечатнойФормы", ПараметрыПечатнойФормы, ЭтотОбъект, , , ,
																		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыгрузитьВесьСписокПосадочныхТалонов(Структурапараметров)
	
	РегистрыСведений.чартер_ЗаписьНаРейс.ПолучитьВсехЗарегистрированныхНаРейс(ШаблонБилета, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьСписокАрхивногоБортаНаСервере()
	
	Документы.чартер_ЗаписьНаРейс.ВыгрузитьЗаписьНаРейс(ШаблонВыгрузки, ОтборВыбранныйРейс);
	
КонецПроцедуры 

&НаСервере
Процедура ВыгрузитьДанныеБронированияНаСервере()
	
	ДокументРегистрации = Элементы.Список.ТекущаяСтрока;  
	
	Если ДокументРегистрации.Место = Неопределено Тогда
		чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю("Для выбранного сотрудника нет активной брони!");
	Иначе
		СтруктураПосадочногоТалона = Новый Структура;
		СтруктураПосадочногоТалона.Вставить("Рейс", ДокументРегистрации.Рейс);
		СтруктураПосадочногоТалона.Вставить("Сотрудник", ДокументРегистрации.Сотрудник);
		СтруктураПосадочногоТалона.Вставить("Место", ДокументРегистрации.Место);	
		Документы.чартер_ЗаписьНаРейс.СформироватьБилетНаРейсДляСотрудника(ШаблонБилета, СтруктураПосадочногоТалона);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборРейса()

	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	
	ДопПараметры = Новый Структура("ИмяРеквизита", "ОтборВыбранныйРейс");
	ДопПараметры.Вставить("ЛевоеЗначение", "Рейс");
	
	ОткрытьФорму("Справочник.чартер_Рейсы.ФормаВыбора", ПараметрыФормыВыбора, Элементы.ОтборВыбранныйРейс,,,
					, Новый ОписаниеОповещения("ВыборЗавершение", ЭтотОбъект, ДопПараметры),);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСчетчикПассажиров()
	
	ВсегоСотрудников = Документы.чартер_ЗаписьНаРейс.ПолучитьКоличествоПассажировНаРейсе(ОтборВыбранныйРейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеПОслеОтветаНаВопросУдалить(Результат, Параметры) Экспорт

    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	
	ИзменитьСтатусЗаписиНаРейс(Параметры);

КонецПроцедуры

&НаКлиенте
Процедура ВыборЗавершение(Результат, ДопПараметры) Экспорт
	
	ИмяОтбора = ДопПараметры.ЛевоеЗначение;
	
	Если ДопПараметры.Свойство("ВидСравнения") Тогда
		ВидСравненияОтбора = ДопПараметры.ВидСравнения;
	Иначе
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	Использование = ЗначениеЗаполнено(Результат);
	
	Изменено = Ложь;
	
	Для каждого СтрокаОтбора Из Список.Отбор.Элементы Цикл
		
		Если СокрЛП(СтрокаОтбора.ЛевоеЗначение) = ИмяОтбора Тогда
			
			СтрокаОтбора.ПравоеЗначение = Результат;
			СтрокаОтбора.ВидСравнения = ВидСравненияОтбора;
			СтрокаОтбора.Использование = Использование;
			
			Изменено = Истина;
						
		КонецЕсли;	
			
	КонецЦикла;
	
	Если Не Изменено Тогда
		
		ЭлементОтбораДанных = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОтбора);
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияОтбора;
		ЭлементОтбораДанных.ПравоеЗначение = Результат;
		ЭлементОтбораДанных.Использование = Использование;
		
	КонецЕсли;
	
	Если Результат <> Неопределено И ДопПараметры.Свойство("ИмяРеквизита") Тогда
		
		Попытка
			ИмяРеквизита = ДопПараметры.ИмяРеквизита;
			Если ТипЗнч(Результат) = Тип("Массив") Тогда
				ЭтотОбъект[ИмяРеквизита].ЗагрузитьЗначения(Результат);
			Иначе
				ЭтотОбъект[ИмяРеквизита] = Результат;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ДоступностьРейса = ПолучитьДоступностьРейса(Результат);
	
	Если Не ДоступностьРейса = Неопределено Тогда
		Доступность = ДоступностьРейса;
		ОбновитьСчетчикПассажиров();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран рейс!";
		Сообщение.Сообщить();
		Доступность = Ложь;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ПолучитьДоступностьРейса(Рейс)

	Возврат Справочники.чартер_Рейсы.ДоступностьРейса(Рейс); 
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусЗаписиНаРейс(Параметры)
	
	ДокументОбъект = Параметры.ВыбраннаяЗапись.ПолучитьОбъект();
	СтатусЗамена = ПолучитьСтатусЗамены(ДокументОбъект.СтатусНаРейсе);
	
	Если СтатусЗамена = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДокументОбъект.СтатусНаРейсе = СтатусЗамена; 
    ДокументОбъект.ДатаИзменения = ТекущаяДатаСеанса();
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сотрудник " + ДокументОбъект.ФИО + " - изменен статус";
		Сообщение.Сообщить();		
		Элементы.Список.Обновить();
	Исключение 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось отменить регистрацию сотрудника!";
		Сообщение.Сообщить();	    
	КонецПопытки;
		
КонецПроцедуры  

&НаСервере
Функция ПолучитьСтатусЗамены(ТекущийСтатус)
	 
	Если ТекущийСтатус = Перечисления.чартер_СтатусыНаРейсе.ЗаписьУдалена Тогда
		 Возврат Перечисления.чартер_СтатусыНаРейсе.ЗаписанНаРейс;	
	ИначеЕсли ТекущийСтатус = Перечисления.чартер_СтатусыНаРейсе.ЗаписанНаРейс Тогда 
	 	 Возврат Перечисления.чартер_СтатусыНаРейсе.ЗаписьУдалена;
	Иначе
		 Возврат Неопределено;
	КонецЕсли;
 		
 КонецФункции
 
#КонецОбласти              
