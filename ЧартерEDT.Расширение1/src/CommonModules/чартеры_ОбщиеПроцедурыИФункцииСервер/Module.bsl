#Область ПрограммныйИнтерфейс

// Получить массив доступных номерных фондов.
// 
// Возвращаемое значение:
//  МассивНомерныхФондов - Массив
//  *Ссылка - СправочникСсылка.ДоступныеНомерныеФонды 
//
Функция ПолучитьМассивДоступныхНомерныхФондов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	PermissionGroupsДоступныеНомерныеФонды.НомернойФонд КАК Ссылка
	|ИЗ
	|	Справочник.Employees КАК Employees
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.PermissionGroups.ДоступныеНомерныеФонды КАК PermissionGroupsДоступныеНомерныеФонды
	|		ПО Employees.PermissionGroup = PermissionGroupsДоступныеНомерныеФонды.Ссылка
	|ГДЕ
	|	Employees.Ссылка = &Ref";
	
	Запрос.УстановитьПараметр("Ref", SessionParameters.CurrentUser);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивНомерныхФондов = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивНомерныхФондов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат МассивНомерныхФондов;
	
КонецФункции

// Проверить дубль регистрации на рейс.
// 
// Параметры:
//  НовыйРейс - СправочникСсылка.чартер_Рейсы
//  ТабельныйНомер - Строка
//  Дубль - Булево 
// 
// Возвращаемое значение:
//  Булево - Проверить дубль регистрации на рейс
//
Функция ПроверитьДубльРегистрацииНаРейс(НовыйРейс, ТабельныйНомер, Дубль = Ложь) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабельныйНомер", ТабельныйНомер);
	Запрос.УстановитьПараметр("Рейс", НовыйРейс);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	чартер_ЗаписьНаРейс.ТабельныйНомер КАК ТабельныйНомер
	               |ИЗ
	               |	РегистрСведений.чартер_ЗаписьНаРейс КАК чартер_ЗаписьНаРейс
	               |ГДЕ
	               |	чартер_ЗаписьНаРейс.ТабельныйНомер = &ТабельныйНомер
	               |	И чартер_ЗаписьНаРейс.Рейс = &Рейс";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Дубль = Истина;
	КонецЕсли;
	
	Возврат Дубль;
	
КонецФункции

// Получить компановку салона на выбранном рейсе.
// 
// Параметры:
//  Рейс - СправочникСсылка.чартер_Рейсы
// 
// Возвращаемое значение:
//  СправочникСсылка.чартер_Рейсы - Получение компоновки салона у конкретного рейса
//
Функция ПолучитьКомпоновкуСалона(Рейс) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	чартер_Рейсы.ТипВС КАК ТипВС
		|ИЗ
		|	Справочник.чартер_Рейсы КАК чартер_Рейсы
		|ГДЕ
		|	чартер_Рейсы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Рейс); 	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда		
		Возврат ВыборкаДетальныеЗаписи.ТипВС;
	КонецЕсли;
	
КонецФункции

// Получить макет рассадки на выбранный рейс.
// 
// Параметры:
//  Рейс - СправочникСсылка.чартер_Рейсы
// 
// Возвращаемое значение:
//  Строка - ПеречислениеССылка.перечисления.чартер_ТипВСРассадка
//
Функция ПолучитьМакетРассадки(Рейс) Экспорт
	
	ТипВС = ПолучитьКомпоновкуСалона(Рейс);
	
	Если ТипВС = перечисления.чартер_ТипВСРассадка.Boeing763_290PAX Тогда
		МакетРассадки = "МакетРассадки290";	
	ИначеЕсли ТипВС = перечисления.чартер_ТипВСРассадка.Boeing763_235PAX Тогда	
		МакетРассадки = "МакетРассадки235";	
	ИначеЕсли ТипВС = перечисления.чартер_ТипВСРассадка.Boeing763_189PAX Тогда		
		МакетРассадки = "МакетРассадки189";	 
	КонецЕсли;
	
	Возврат МакетРассадки;
	
КонецФункции

// Получить все забронированные места на рейсе
// 
// Параметры:
//  Рейс - СправочникСсылка.чартер_Рейсы
// 
// Возвращаемое значение:
//  ТаблицаЗначений 
//  *МестоПредставление - Строка
//
Функция ЭтоЗабронированныеМеста(Рейс) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	чартер_ЗаписьНаРейс.Место.Представление КАК МестоПредставление
	               |ИЗ
	               |	РегистрСведений.чартер_ЗаписьНаРейс КАК чартер_ЗаписьНаРейс
	               |ГДЕ
	               |	чартер_ЗаписьНаРейс.Рейс = &Рейс
	               |	И НЕ чартер_ЗаписьНаРейс.Место = ЗНАЧЕНИЕ(Справочник.чартер_ПосадочныеМестаНаРейс.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Рейс", Рейс);
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверить доступность места для бронирования на рейс
// 
// Параметры:
//  Рейс - СправочникСсылка.чартер_Рейсы
//  МестоСотрудника - СправочникСсылка
// 
// Возвращаемое значение:
//  Булево - Проверить доступность брони
//
Функция ПроверитьДоступностьБрони(Рейс, МестоСотрудника) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	чартер_ЗаписьНаРейс.Сотрудник КАК Сотрудник,
		|	чартер_ЗаписьНаРейс.Место.Представление КАК МестоПредставление
		|ИЗ
		|	РегистрСведений.чартер_ЗаписьНаРейс КАК чартер_ЗаписьНаРейс
		|ГДЕ
		|	чартер_ЗаписьНаРейс.Место = &Место
		|	И чартер_ЗаписьНаРейс.Рейс = &Рейс";
	
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.УстановитьПараметр("Место", МестоСотрудника);
		
	РезультатЗапроса = Запрос.Выполнить();
	    
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

// Получить актуальную бронь по местам в конерктной области макета (класса)
// 
// Параметры:
//  Рейс - СправочникСсылка.чартер_Рейсы
//  Макет - ТекстовыйДокумент
//  Область - Строка
// 
// Возвращаемое значение:
//  ТабличныйДокумент, ТекстовыйДокумент - Это актуальная бронь на рейс
//
Функция ЭтоАктуальнаяБроньНаРейс(Рейс, Макет, Область) Экспорт

	МакетРассадки = Документы.чартер_ЗаписьНаРейс.ПолучитьМакет(Макет);
	Область = МакетРассадки.ПолучитьОбласть(Область);
	
	ЗабронированныеМеста = ЭтоЗабронированныеМеста(Рейс);

	Для Каждого Место Из ЗабронированныеМеста Цикл
		ЗабронированноеМесто = Область.НайтиТекст(Место.МестоПредставление);
		Если НЕ ЗабронированноеМесто = Неопределено И ЗабронированноеМесто.Text = Место.МестоПредставление Тогда			
			Область.Область(ЗабронированноеМесто.Name).BackColor = WebЦвета.Лосось;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Область;
	
КонецФункции

// Проверка наличия брони у сотрудника на рейс
// 
// Параметры:
//  Рейс - СправочникСсылка  - Рейс сотрудника 
//  Сотрудник - СправочникСсылка - Проверяемый Сотрудник 
// 
// Возвращаемое значение:
//  Булево - Есть бронь
//
Функция ЕстьБронь(Рейс, Сотрудник) Экспорт

	Результат = Ложь;

	Запрос = Новый Запрос;
	Запрос = Новый Запрос;
	Запрос.Текст =
					"ВЫБРАТЬ
					|	чартер_ЗаписьНаРейс.Место
					|ИЗ
					|	РегистрСведений.чартер_ЗаписьНаРейс КАК чартер_ЗаписьНаРейс
					|ГДЕ
					|	чартер_ЗаписьНаРейс.Рейс = &Рейс
					|	И чартер_ЗаписьНаРейс.Сотрудник = &Сотрудник";

	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Если НЕ Выборка.Место = справочники.чартер_ПосадочныеМестаНаРейс.ПустаяСсылка() Тогда
		Результат = Истина;
	КонецЕсли;	
	
	Возврат Результат;

КонецФункции

// Возвращает полную информацию по выбранному забронированному месту
//
// Параметры:
// 	Рейс	- СправочникСсылка - Справочник чартер_Рейсы
// 	Место	- СправочникСсылка - Справочник чартер_ПосадочныеМестаНаРейс
// 	
// 	Возвращаемое значение:
// 		Структура
// 		*Организация - СправочникСсылка
// 		*ФИО - Строка
// 		*Место - СправочникСсылка
//
Функция ПолучитьИнформациюПоБрони(Рейс, Место) Экспорт
	
	СтруктураБрони = Новый Структура;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				|	чартер_ЗаписьНаРейс.Организация,
				|	чартер_ЗаписьНаРейс.Место,
				|	чартер_ЗаписьНаРейс.ФИО
				|ИЗ
				|	РегистрСведений.чартер_ЗаписьНаРейс КАК чартер_ЗаписьНаРейс
				|ГДЕ
				|	чартер_ЗаписьНаРейс.Рейс = &Рейс
				|	И чартер_ЗаписьНаРейс.Место = &Место";
				
	Запрос.УстановитьПараметр("Рейс", Рейс);			
	Запрос.УстановитьПараметр("Место", Место);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураБрони.Вставить("Организация", Выборка.Организация);
		СтруктураБрони.Вставить("Место", Выборка.Место);
		СтруктураБрони.Вставить("ФИО", Выборка.ФИО);
	КонецЦикла;	

	Возврат СтруктураБрони;
		
КонецФункции

// Вернуть причину вылета.
// 
// Параметры:
//  Причина  - Строка
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.чартер_ПричинаВылета, Неопределено - Вернуть причину вылета
//
Функция ВернутьПричинуВылета(Причина) Экспорт
	
	ПричинаВылета = Неопределено;        
	
	Для Каждого ТекЗначение Из Метаданные.Перечисления.чартер_ПричинаВылета.ЗначенияПеречисления Цикл        
		Если ТекЗначение.Имя = Причина Или ТекЗначение.Синоним = Причина Тогда
            ПричинаВылета = Перечисления.чартер_ПричинаВылета[ТекЗначение.Имя];
            Прервать;        
		КонецЕсли;	
    КонецЦикла;
	
	Возврат ПричинаВылета;
	
КонецФункции

// Получить подрядчика.
// 
// Параметры:
//  НаименованиеПодрядчика - СправочникСсылка - Наименование подрядчика
// 
// Возвращаемое значение:
//  Неопределено - Получить подрядчика
//
Функция ПолучитьПодрядчика(НаименованиеПодрядчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
				"ВЫБРАТЬ
				|	чартер_Организации.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.чартер_Организации КАК чартер_Организации
				|ГДЕ
				|	чартер_Организации.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеПодрядчика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция раскладывает строку в массив строк, используя "./\" как разделитель
// 
// Параметры:
//  Представление - Строка - Представление
// 
// Возвращаемое значение:
//  Фрагменты - Массив - Разложить строку по точкам и слэшам
//
Функция РазложитьСтрокуПоТочкамИСлэшам(Знач Представление) Экспорт
	
	Перем ТекущаяПозиция;
	
	Фрагменты = Новый Массив;
	
	НачальнаяПозиция = 1;
	
	Для ТекущаяПозиция = 1 По СтрДлина(Представление) Цикл
		ТекущийСимвол = Сред(Представление, ТекущаяПозиция, 1);
		Если ТекущийСимвол = "." Или ТекущийСимвол = "/" Или ТекущийСимвол = "\" Тогда
			ТекущийФрагмент = Сред(Представление, НачальнаяПозиция, ТекущаяПозиция - НачальнаяПозиция);
			НачальнаяПозиция = ТекущаяПозиция + 1;
			Фрагменты.Добавить(ТекущийФрагмент);
		КонецЕсли;
	КонецЦикла;
	
	Если НачальнаяПозиция <> ТекущаяПозиция Тогда
		ТекущийФрагмент = Сред(Представление, НачальнаяПозиция, ТекущаяПозиция - НачальнаяПозиция);
		Фрагменты.Добавить(ТекущийФрагмент);
	КонецЕсли;
	
	Возврат Фрагменты;
	
КонецФункции

// Возвращает данные из безопасного хранилища.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Безопасное хранилище недоступно для чтения пользователям (кроме администраторов),
// а доступно только коду, который делает обращения только к своей части данных и
// в том контексте, который предполагает чтение или запись конфиденциальных данных.
//
// Параметры:
//  Владелец    - ПланОбменаСсылка
//              - СправочникСсылка
//              - Строка - ссылка на объект информационной базы,
//                  представляющий объект-владелец сохраняемого пароля или строка до 128 символов.
//  Ключи       - Строка - содержит список имен сохраненных данных, указанных через запятую.
//  ОбщиеДанные - Булево - Истина, если требуется в модели сервиса получить данные из общих данных в разделенном режиме.
// 
// Возвращаемое значение:
//  Произвольный, Структура, Неопределено - данные из безопасного хранилища. Если указан один ключ,
//                            то возвращается его значение, иначе структура.
//                            Если данные отсутствуют - Неопределенно.
//
// Пример:
//	Процедура ПриЧтенииНаСервере(ТекущийОбъект)
//		
//		Если ТекущийПользовательМожетИзменятьПароль Тогда
//			УстановитьПривилегированныйРежим(Истина);
//			Логин  = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущийОбъект.Ссылка, "Логин");
//			Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущийОбъект.Ссылка);
//			УстановитьПривилегированныйРежим(Ложь);
//		Иначе
//			Элементы.ГруппаЛогинИПароль.Видимость = Ложь;
//		КонецЕсли;
//		
//	КонецПроцедуры
//
Функция ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключи = "Пароль", ОбщиеДанные = Неопределено) Экспорт
	
	Проверить(ЗначениеЗаполнено(Владелец),
		ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение параметра %1 в %2.
			           |параметр должен содержать ссылку; передано значение: %3 (тип %4).'"),
			"Владелец", "ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища", Владелец, ТипЗнч(Владелец)));
	
	//Если РазделениеВключено() И ДоступноИспользованиеРазделенныхДанных() Тогда
	//	Если ОбщиеДанные = Истина Тогда
	//		ИмяБезопасногоХранилищаДанных = "БезопасноеХранилищеДанных";
	//	Иначе
	//		ИмяБезопасногоХранилищаДанных = "БезопасноеХранилищеДанныхОбластейДанных";
	//	КонецЕсли;
	//Иначе
		ИмяБезопасногоХранилищаДанных = "БезопасноеХранилищеДанных";
	//КонецЕсли;
	Результат = ДанныеИзБезопасногоХранилища(Владелец, ИмяБезопасногоХранилищаДанных, Ключи);
	
	Если Результат <> Неопределено И Результат.Количество() = 1 Тогда
		Возврат ?(Результат.Свойство(Ключи), Результат[Ключи], Неопределено);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#Область РаботаСПочтовымКлиентом   

// Отправить рассылки.
// 
// Параметры:
//  Рассылка - СправочникСсылка - Рассылка
//  ПараметрыРассылки - Структура - Параметры рассылки
//
Процедура ОтправитьРассылки(Рассылка, ПараметрыРассылки = Неопределено) Экспорт
    
	МассивАдресов = ПолучитьАдресатовРасссылки(Рассылка); 
		
	Если Не ЗначениеЗаполнено(МассивАдресов) Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = СтрСоединить(МассивАдресов, ";");
	
	Если ЗначениеЗаполнено(ПараметрыРассылки) Тогда
		ТекстПисьма = ЗаполнитьШаблон(Рассылка.ТекстПисьма, ПараметрыРассылки);	
	Иначе
		ТекстПисьма = Рассылка.ТекстПисьма;	
	КонецЕсли;
	
	Сообщение = Новый Структура;
	Сообщение.Вставить("ТелоПисьма", ТекстПисьма);
	Сообщение.Вставить("ТемаПисьма", Рассылка.ТемаПисьма); 		
	
	СтруктураПочты = ПолучитьОбъектИнтернетПочта(Рассылка.УчетнаяЗаписьДляОтрпавки);
			
	ОтправитьРассылку(Сообщение, Рассылка.УчетнаяЗаписьДляОтрпавки, СтруктураПочты.Почта, Адрес);				
	
КонецПроцедуры 

Функция ПолучитьУчетнуюЗаписьРассылки(СсылкаНаУЗ) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	чартер_УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.чартер_УчетныеЗаписиЭлектроннойПочты КАК чартер_УчетныеЗаписиЭлектроннойПочты
	               |ГДЕ
	               |	чартер_УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаУЗ);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.чартер_УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат  Выборка.Ссылка;
	КонецЕсли;
	                                       	
КонецФункции

#КонецОбласти

#Область КомпановкаТескстаРассылки

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  ШаблонСтроки  - Строка - шаблон строки с параметрами (вхождениями вида "%<номер параметра>", 
//                           например "%1 пошел в %2");
//  Параметр1   - Строка - значение подставляемого параметра.
//  Параметр2   - Строка
//  Параметр3   - Строка
//  Параметр4   - Строка
//  Параметр5   - Строка
//  Параметр6   - Строка
//  Параметр7   - Строка
//  Параметр8   - Строка
//  Параметр9   - Строка
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел
//  в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ЕстьПараметрыСПроцентом = СтрНайти(Параметр1, "%")
		Или СтрНайти(Параметр2, "%")
		Или СтрНайти(Параметр3, "%")
		Или СтрНайти(Параметр4, "%")
		Или СтрНайти(Параметр5, "%")
		Или СтрНайти(Параметр6, "%")
		Или СтрНайти(Параметр7, "%")
		Или СтрНайти(Параметр8, "%")
		Или СтрНайти(Параметр9, "%");
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции 

// Проверить.
// 
// Параметры:
//  Условие - Булево
//  Сообщение  - Строка
//  КонтекстПроверки - Строка
Процедура Проверить(Знач Условие, Знач Сообщение = "", Знач КонтекстПроверки = "") Экспорт
	
	Если Условие <> Истина Тогда
		
		Если ПустаяСтрока(Сообщение) Тогда
			ТекстИсключения = НСтр("ru = 'Недопустимая операция'"); // Assertion failed
		Иначе
			ТекстИсключения = Сообщение;
		КонецЕсли;
		
		Если Не ПустаяСтрока(КонтекстПроверки) Тогда
			ТекстИсключения = ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 в %2'"), ТекстИсключения, КонтекстПроверки);
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

// Получить рассылку по событию.
// 
// Параметры:
//  Событие - ПеречислениеСсылка.чартер_СобытияРасссылок
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.чартер_СобытияРасссылок - Получить рассылку по событию
//
Функция ПолучитьРассылкуПоСобытию(Событие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	чартер_НастройкаРассылок.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.чартер_НастройкаРассылок КАК чартер_НастройкаРассылок
	               |ГДЕ
	               |	чартер_НастройкаРассылок.СобытияРассылок = &СобытияРассылок";
	
	Запрос.УстановитьПараметр("СобытияРассылок", Событие);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат перечисления.чартер_СобытияРасссылок.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции

#КонецОбласти

// Удалить непроверяемые реквизиты из массива.
// 
// Параметры:
//  МассивРеквизитов - Массив 
//  МассивНепроверяемыхРеквизитов - Массив
//
Процедура УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов) Экспорт

  Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
 
    // перед удалением реквизита из массива необходимо проверить, что он там есть
    // (не был удален ранее платформой или в коде).
    ПорядковыйНомер = МассивРеквизитов.Найти(ЭлементМассива);
    Если ПорядковыйНомер <> Неопределено Тогда
      МассивРеквизитов.Удалить(ПорядковыйНомер);
    КонецЕсли;
 
  КонецЦикла;
 
КонецПроцедуры

// Процедура предназначена для заполнения реквизита формы типа ДанныеФормыДерево.
//
// Параметры:
//  КоллекцияЭлементовДерева - ДанныеФормыКоллекцияЭлементовДерева - реквизит, который нужно заполнить.
//  ДеревоЗначений           - ДеревоЗначений    - данные для заполнения.
// 
Процедура ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(КоллекцияЭлементовДерева, ДеревоЗначений) Экспорт
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		ЭлементДерева = КоллекцияЭлементовДерева.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементДерева, Строка);
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ЭлементДерева.ПолучитьЭлементы(), Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОповещениеПользователя

// Формирует и выводит сообщение, которое может быть связано с элементом управления формы.
//
// Параметры:
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных - ЛюбаяСсылка - объект или ключ записи информационной базы, к которому это сообщение относится.
//  Поле - Строка - наименование реквизита формы.
//  ПутьКДанным - Строка - путь к данным (путь к реквизиту формы).
//  Отказ - Булево - выходной параметр, всегда устанавливается в значение Истина.
//
// Пример:
//
//  1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//  ОбщегоНазначения.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "ПолеВРеквизитеФормыОбъект",
//   "Объект");
//
//  Альтернативный вариант использования в форме объекта:
//  ОбщегоНазначения.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "Объект.ПолеВРеквизитеФормыОбъект");
//
//  2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//  ОбщегоНазначения.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "ИмяРеквизитаФормы");
//
//  3. Для вывода сообщения связанного с объектом информационной базы:
//  ОбщегоНазначения.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
//  4. Для вывода сообщения по ссылке на объект информационной базы:
//  ОбщегоНазначения.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
//  Случаи некорректного использования:
//   1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//   2. Передача в параметре КлючДанных значения типа отличного от допустимого.
//   3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено,	Знач Поле = "",
	Знач ПутьКДанным = "", Отказ = Ложь) Экспорт
	
	ЭтоОбъект = Ложь;
	
	Если КлючДанных <> Неопределено
		И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
	
	СообщитьПользователюСлужебный(ТекстСообщенияПользователю, КлючДанных, Поле,
		ПутьКДанным, Отказ, ЭтоОбъект);
	
КонецПроцедуры 
	
// Сообщить пользователю служебный.
// 
// Параметры:
//  ТекстСообщенияПользователю - Строка - Текст сообщения пользователю
//  КлючДанных - ЛюбаяСсылка, Неопределено - Ключ данных
//  Поле - Строка - Поле
//  ПутьКДанным - Строка - Путь к данным
//  Отказ - Булево - Отказ
//  ЭтоОбъект - Булево - Это объект
//
Процедура СообщитьПользователюСлужебный(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных,
		Знач Поле,
		Знач ПутьКДанным = "",
		Отказ = Ложь,
		ЭтоОбъект = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеДанныхИзВнешнегоФайла

// Прочитать табличный документ из ВФ.
// 
// Параметры:
//  АдресХранилища - АдресХранилища
// 
// Возвращаемое значение:
//  Булево, ДеревоЗначений, ТаблицаЗначений - Прочитать табличный документ из ВФ
//
Функция ПрочитатьТабличныйДокументИзВФ(АдресХранилища) Экспорт	
	
	Данные = ПолучитьИзВременногоХранилища(АдресХранилища);
		
	ИмяФайлаВременное = ПолучитьИмяВременногоФайла("xlsx");
	Данные.Записать(ИмяФайлаВременное);
	НомерЛистаExcel = 1;	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТаблицаОбластей = Новый ТаблицаЗначений;
	ТаблицаОбластей.Колонки.Добавить("Имя");
	ТаблицаОбластей.Колонки.Добавить("Верх");
	
	Попытка
						
		ТабличныйДокумент.Прочитать(ИмяФайлаВременное, СпособЧтенияЗначенийТабличногоДокумента.Значение);
		ТабличныйДокумент.ПоказатьУровеньГруппировокКолонок(999);
		ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(999);
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаОбластей.Добавить(), Область);
		КонецЦикла;
		
		ТаблицаОбластей.Сортировать("Верх");
		
		Если ТаблицаОбластей.Количество() < НомерЛистаExcel Тогда
			СообщитьПользователю(СтрШаблон("Лист под номером %1 не найден", НомерЛистаExcel));			
			Возврат Ложь;
		Иначе			
			//ВыгрузитьДанныеДляПредпросмотра(ТабличныйДокумент);
			ПоследняяСтрока   = ТабличныйДокумент.ВысотаТаблицы;
		    ПоследняяКолонка  = ТабличныйДокумент.ШиринаТаблицы;
		    ОбластьЯчеек      = ТабличныйДокумент.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка);
			ИсточникДанных    = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
		    ПостроительОтчета = Новый ПостроительОтчета;
		    ПостроительОтчета.ИсточникДанных = ИсточникДанных;
		    ПостроительОтчета.Выполнить();
			Возврат ПостроительОтчета.Результат.Выгрузить();			
			ТабличныйДокумент = Неопределено;
		КонецЕсли;    				
	Исключение
		СообщитьПользователю(ОписаниеОшибки());		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

// Функция для записи присоединенных файлов в справочник чартер_Файлы
//
//  Возвращаемое значение:
//	 справочникСсылка.чартер_Файлы
//	
Функция ЗаписатьФайлВСправочникФайлы(АдресВоВременномХранилище, СтруктураДанныхФайла, ТекущийПользователь
																				, ВладелецФайла = Неопределено) Экспорт
	
	СпрФайл = Справочники.чартер_Файлы.СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(СпрФайл, СтруктураДанныхФайла);
	
	СпрФайл.Файл = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	СпрФайл.ВладелецФайла = ВладелецФайла;
	
	РасширениеФайла = РасширениеБезТочки(СтруктураДанныхФайла.Расширение); 
	СпрФайл.РасширениеФайла = РасширениеФайла;
	
	СпрФайл.Автор = SessionParameters.CurrentUser;
	СпрФайл.ДатаСоздания = ТекущаяДатаСеанса();
	
	СпрФайл.Записать();
	
	Возврат СпрФайл.Ссылка;
	
КонецФункции

// Преобразует расширение файла в нижний регистр без точки.
//
// Параметры:
//  Расширение - Строка - расширение для преобразования.
//
// Возвращаемое значение:
//  Строка - преобразованное расширение.
//
Функция РасширениеБезТочки(Знач Расширение) Экспорт
	
	Расширение = НРег(СокрЛП(Расширение));
	
	Если Сред(Расширение, 1, 1) = "." Тогда
		Расширение = Сред(Расширение, 2);
	КонецЕсли;
	
	Возврат Расширение;
	
КонецФункции

// Устанавливает свойство ИмяСвойства элемента формы с именем ИмяЭлемента в значение Значение.
// Применяется в тех случаях, когда элемента формы может не быть на форме из-за отсутствия прав у пользователя
// на объект, реквизит объекта или команду.
//
// Параметры:
//  ЭлементыФормы - ВсеЭлементыФормы
//                - ЭлементыФормы - коллекция элементов управляемой формы.
//  ИмяЭлемента   - Строка       - имя элемента формы.
//  ИмяСвойства   - Строка       - имя устанавливаемого свойства элемента формы.
//  Значение      - Произвольный - новое значение элемента.
// 
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
	
	ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено И ЭлементФормы[ИмяСвойства] <> Значение Тогда
		ЭлементФормы[ИмяСвойства] = Значение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить объект интернет почта.
// 
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.чартер_УчетныеЗаписиЭлектроннойПочты
//  ПолучениеСообщений  - Булево
// 
// Возвращаемое значение:
//  Структура
//  
Функция ПолучитьОбъектИнтернетПочта(УчетнаяЗапись, ПолучениеСообщений = Ложь) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Профиль = ИнтернетПочтовыйПрофиль(УчетнаяЗапись, ПолучениеСообщений);
	Почта = Новый ИнтернетПочта;
	
	СтруктураВозврата = Новый Структура("Почта, ОписаниеОшибки", Неопределено, "");
	
	Попытка
		Почта.Подключиться(Профиль);
		СтруктураВозврата.Почта = Почта;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		СтруктураВозврата.ОписаниеОшибки = "Не удалось подключится к почте по причине: " + ОписаниеОшибки;
	КонецПопытки;
		
	Возврат СтруктураВозврата;
	
КонецФункции

// Отправить рассылку.
// 
// Параметры:
//  СтруктураСообщения - Структура - Структура сообщения:
// * ТелоПисьма - Строка
// * ТемаПисьма - Строка  
//  УчетнаяЗапись - СправочникСсылка.чартер_УчетныеЗаписиЭлектроннойПочты 
//  ОбъектПочта - Неопределено - Объект почта
//  ПочтовыйЯщикПолучателя - Строка - Почтовый ящик получателя
//  СтруктураВложения - Неопределено - Структура вложения
// 
// Возвращаемое значение:
//  Структура - Отправить рассылку:
// * Успех - Булево
// * ОписаниеОшибки - Строка
//
Функция ОтправитьРассылку(СтруктураСообщения, УчетнаяЗапись, ОбъектПочта, ПочтовыйЯщикПолучателя
																	, СтруктураВложения = Неопределено) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Получатели = СтрРазделить(ПочтовыйЯщикПолучателя, ";", Ложь);
	
	СообщениеПочты = Новый ИнтернетПочтовоеСообщение;   
	
	Для Каждого Получатель Из Получатели Цикл
		СообщениеПочты.Получатели.Добавить(СокрЛП(Получатель));
	КонецЦикла;
	
	СообщениеПочты.Отправитель = УчетнаяЗапись.АдресЭлектроннойПочты;
	СообщениеПочты.ИмяОтправителя = "1С:Чартер";	
	СообщениеПочты.Отправитель.ОтображаемоеИмя = "1С:Чартер";
	СообщениеПочты.Тема = СтруктураСообщения.ТемаПисьма;		
	СообщениеПочты.Тексты.Добавить(СтруктураСообщения.ТелоПисьма, ТипТекстаПочтовогоСообщения.HTML);
	СообщениеПочты.ОбработатьТексты();	

	СтруктураВозврата = Новый Структура("Успех, ОписаниеОшибки", Истина, "");
	
	Попытка
		ОбъектПочта.Послать(СообщениеПочты);
		СообщитьПользователю("Рассылка отправлена!");	
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();   
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.ОписаниеОшибки = ОписаниеОшибки;
		СообщитьПользователю("Рассылка не отправлена! " + ОписаниеОшибки);		
	КонецПопытки;
	
	Возврат СтруктураВозврата;	

КонецФункции 

// Данные из безопасного хранилища.
// 
// Параметры:
//  Владелец - ПланОбменаСсылка, СправочникСсылка, Строка - Владелец
//  ИмяБезопасногоХранилищаДанных - Строка - Имя безопасного хранилища данных
//  Ключ - Строка - Ключ
// 
// Возвращаемое значение:
//  Структура - Данные из безопасного хранилища
//
Функция ДанныеИзБезопасногоХранилища(Владелец, ИмяБезопасногоХранилищаДанных, Ключ)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	БезопасноеХранилищеДанных.Данные КАК Данные
		|ИЗ
		|	#ИмяБезопасногоХранилищаДанных КАК БезопасноеХранилищеДанных
		|ГДЕ
		|	БезопасноеХранилищеДанных.Владелец = &Владелец";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяБезопасногоХранилищаДанных"
																		, "РегистрСведений." + ИмяБезопасногоХранилищаДанных);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура(Ключ);
	Если РезультатЗапроса.Следующий() Тогда
		Если ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
			СохраненныеДанные = РезультатЗапроса.Данные.Получить();
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиПодсистемы() Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("ДоступноПолучениеПисем", Истина);	
	Возврат Настройки;
КонецФункции

Функция ИнтернетПочтовыйПрофиль(УчетнаяЗапись, ДляПолучения = Ложь) 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	|	УчетныеЗаписиЭлектроннойПочты.Пароль КАК Пароль,
	|	УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты КАК АдресСервераSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераИсходящейПочты КАК ПортSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты КАК ИспользоватьSSLSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ТребуетсяВходНаСерверПередОтправкой КАК POP3ПередSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ВремяОжидания КАК Таймаут,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты КАК Протокол,
	|	УчетныеЗаписиЭлектроннойПочты.ПриОтправкеПисемТребуетсяАвторизация КАК ПриОтправкеПисемТребуетсяАвторизация
	|ИЗ
	|	Справочник.чартер_УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		СписокСвойствIMAP = "ИспользоватьSSLIMAP,АдресСервераIMAP,ПортIMAP,ПользовательIMAP";
		СписокСвойствPOP3 = "АдресСервераPOP3,ПортPOP3,ИспользоватьSSLPOP3,Пользователь";
		СписокСвойствSMTP = "АдресСервераSMTP,ПортSMTP,ИспользоватьSSLSMTP";
		
		//УстановитьПривилегированныйРежим(Истина);
		//Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль,ПарольSMTP");
		//УстановитьПривилегированныйРежим(Ложь);
		
		Результат = Новый ИнтернетПочтовыйПрофиль;
		Если ДляПолучения Тогда
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = СписокСвойствIMAP;
				Результат.ПарольIMAP = Выборка.Пароль;
			Иначе
				ТребуемыеСвойства = СписокСвойствPOP3;
				Результат.Пароль = Выборка.Пароль;
			КонецЕсли;
		Иначе
			ТребуемыеСвойства = СписокСвойствSMTP;
			Если Выборка.ПриОтправкеПисемТребуетсяАвторизация И Не Выборка.POP3ПередSMTP Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + ",ПользовательSMTP";
			КонецЕсли;
			Результат.ПарольSMTP = Выборка.Пароль;
			Если Выборка.Протокол <> "IMAP" И Выборка.POP3ПередSMTP Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + ",POP3ПередSMTP," + СписокСвойствPOP3;
				Результат.Пароль = Выборка.Пароль;
			КонецЕсли;
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + "," + СписокСвойствIMAP;
				Результат.ПарольIMAP = Выборка.Пароль;
			КонецЕсли;
		КонецЕсли;
		ТребуемыеСвойства = ТребуемыеСвойства + ",Таймаут";
		ЗаполнитьЗначенияСвойств(Результат, Выборка, ТребуемыеСвойства);
		Если Результат.ПользовательSMTP = "" Тогда
			Результат.ПарольSMTP = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.ПарольIMAP = "" Тогда
		Результат.ПарольIMAP = Результат.ПарольSMTP;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдресатовРасссылки(Рассылка)
	
	МассивАдресов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	чартер_НастройкаРассылокАдресаты.ПочтовыйАдрес КАК ПочтовыйАдрес
	               |ИЗ
	               |	Справочник.чартер_НастройкаРассылок.Адресаты КАК чартер_НастройкаРассылокАдресаты
	               |ГДЕ
	               |	чартер_НастройкаРассылокАдресаты.Ссылка = &Ссылка
	               |	И НЕ чартер_НастройкаРассылокАдресаты.Исключен";
	
	Запрос.УстановитьПараметр("Ссылка", Рассылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл                                 		
			МассивАдресов.Добавить(Выборка.ПочтовыйАдрес);			
		КонецЦикла;		
	КонецЕсли;	   
	
	Возврат МассивАдресов;
	
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = СтрНайти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = СтрНайти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

// Заполняет шаблон из структуры параметров, поддерживает форматирование, может оставлять обрамление шаблона.
//   Ограничение: должны присутствовать и левый и правый элементы обрамления.
//
// Параметры:
//   Шаблон - Строка - исходный шаблон. Например "Добрый день, [ФИО]".
//   Параметры - Структура - набор параметров, которые необходимо подставить в шаблон:
//      * Ключ - имя параметра. Например "ФИО".
//      * Значение - строка подстановки. Например "Иванов Иван Иванович".
//
// Возвращаемое значение: 
//   Строка - шаблон с заполненными параметрами.
//
Функция ЗаполнитьШаблон(Шаблон, Параметры) Экспорт
	
	Левый = "["; // Начало обрамления параметра.
	Правый = "]"; // Конец обрамления параметра.
	ФорматЛевый = "("; // Начало обрамления формата.
	ФорматПравый = ")"; // Конец обрамления формата.
	ВырезатьОбрамление = Истина; // Истина означает, что обрамление параметра будет убрано из результата.
	
	Результат = Шаблон;
	Для Каждого КлючИЗначение Из Параметры Цикл
		// Замена "[ключ]" на "значение".
		Результат = СтрЗаменить(
			Результат,
			Левый + КлючИЗначение.Ключ + Правый, 
			?(ВырезатьОбрамление, "", Левый) + КлючИЗначение.Значение + ?(ВырезатьОбрамление, "", Правый));
		ДлинаФорматЛевый = СтрДлина(Левый + КлючИЗначение.Ключ + ФорматЛевый);
		// Замена "[ключ(формат)]" на "значение в формате".
		Поз1 = СтрНайти(Результат, Левый + КлючИЗначение.Ключ + ФорматЛевый);
		Пока Поз1 > 0 Цикл
			Поз2 = СтрНайти(Результат, ФорматПравый + Правый);
			Если Поз2 = 0 Тогда
				Прервать;
			КонецЕсли;
			ФорматнаяСтрока = Сред(Результат, Поз1 + ДлинаФорматЛевый, Поз2 - Поз1 - ДлинаФорматЛевый);
			Попытка
				НаЧтоЗаменить = ?(ВырезатьОбрамление, "", Левый) + Формат(КлючИЗначение.Значение, ФорматнаяСтрока) + ?(ВырезатьОбрамление, "", Правый);
			Исключение
				НаЧтоЗаменить = ?(ВырезатьОбрамление, "", Левый) + КлючИЗначение.Значение + ?(ВырезатьОбрамление, "", Правый);
			КонецПопытки;
			Результат = СтрЗаменить(
				Результат,
				Левый + КлючИЗначение.Ключ + ФорматЛевый + ФорматнаяСтрока + ФорматПравый + Правый, 
				НаЧтоЗаменить);
			Поз1 = СтрНайти(Результат, Левый + КлючИЗначение.Ключ + ФорматЛевый);
		КонецЦикла;
	КонецЦикла;
	Возврат Результат; 
	
КонецФункции

#КонецОбласти     