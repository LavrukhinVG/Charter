
Функция ЗагрузкаСотрудниковSend(HTTPЗапрос)
	//Ответ = Новый HTTPСервисОтвет(200);
	//Возврат Ответ;
	
	ВнешняяСистема = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнешниеСистемыОбмена.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВнешниеСистемыОбмена КАК ВнешниеСистемыОбмена
	|ГДЕ
	|	ВнешниеСистемыОбмена.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "ЗУП");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВнешняяСистема = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Если ВнешняяСистема = Неопределено Тогда
		
		СтруктураОтвета = Новый Структура("Ошибка", "В системе-получателе на найден корреспондент");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		ТелоОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(405);
		Ответ.Заголовки.Вставить("Content-type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		
		Возврат Ответ;
	КонецЕсли;
	
	ВидОбмена = Catalogs.ВидыОбменов.НайтиПоНаименованию("Загрузка сотрудников", Истина, , ВнешняяСистема);
	
	Если ВидОбмена = Неопределено Тогда
		
		СтруктураОтвета = Новый Структура("Ошибка", "В системе-получателе на найден вид обмена для корреспондента");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		ТелоОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(405);
		Ответ.Заголовки.Вставить("Content-type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		
		Возврат Ответ;
	КонецЕсли;
	
	ЗаписьИстории = Новый Структура;
	ЗаписьИстории.Вставить("ФорматЗапроса", "JSON");
	ЗаписьИстории.Вставить("ВнешняяСистема", ВнешняяСистема);
	ЗаписьИстории.Вставить("ВидОбмена", ВидОбмена);
	ЗаписьИстории.Вставить("ЭтоВходящийЗапрос", Истина);
	ЗаписьИстории.Вставить("ЗаголовкиЗапроса",ПолучитьЗаголовкиHTTPКакСтроку(HTTPЗапрос.Заголовки));
	ЗаписьИстории.Вставить("Метаданные",ПолучитьМетаданные(HTTPЗапрос));
	
	МассивОшибок = Новый Массив;
	
	Попытка
		
		МассивДат = СтрРазделить("ДатаРождения
		|ДатаПриема
		|ДатаУвольнения
		|ТрудовойДоговорДата
		|ДатаЗавершенияТрудовогоДоговора
		|ДатаВыдачи
		|СостояниеДействуетДо
		|СрокДействия",Символы.ПС, Ложь);
				
		ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
		МассивДанных = ПрочитатьJSON(ЧтениеJSON, Ложь, МассивДат, ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
		
		ЗаписьJSON = Новый ЗаписьJSON;    
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		ЗаписатьJSON(ЗаписьJSON, МассивДанных);
		ФорматированныйJSON = ЗаписьJSON.Закрыть();
		
		ЗаписьИстории.Вставить("ТелоЗапроса", Новый ХранилищеЗначения(ФорматированныйJSON));
		
		//------------------------------
		СоответствиеВидовДокументов  = Новый Соответствие;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	IdentityDocumentTypes.Ссылка КАК Ссылка,
		|	IdentityDocumentTypes.Наименование КАК Наименование
		|ИЗ
		|	Справочник.IdentityDocumentTypes КАК IdentityDocumentTypes";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СоответствиеВидовДокументов.Вставить(ВРег(Выборка.Наименование), Выборка.Ссылка);
		КонецЦикла;
		
		//------------------------------
		СоответствиеГражданства  = Новый Соответствие;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Countries.Ссылка КАК Ссылка,
		|	Countries.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Countries КАК Countries
		|ГДЕ
		|	Countries.ЭтоГруппа = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СоответствиеГражданства.Вставить(Врег(Выборка.Наименование), Выборка.Ссылка);
		КонецЦикла;
		
		//------------------------------
		//СоответствиеИдентификаторов = Новый Соответствие;
		//
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ИдентификаторыОбъектовВоВнешнихСистемах.ИдентификаторОбъектаВоВнешнейСистеме КАК ИдентификаторОбъектаВоВнешнейСистеме,
		//|	ИдентификаторыОбъектовВоВнешнихСистемах.Объект КАК Объект
		//|ИЗ
		//|	РегистрСведений.ИдентификаторыОбъектовВоВнешнихСистемах КАК ИдентификаторыОбъектовВоВнешнихСистемах
		//|ГДЕ
		//|	ИдентификаторыОбъектовВоВнешнихСистемах.ВнешняяСистема = &ВнешняяСистема";
		//
		//Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
		//
		//РезультатЗапроса = Запрос.Выполнить();
		//
		//Выборка = РезультатЗапроса.Выбрать();
		//
		//Пока Выборка.Следующий() Цикл
		//	СоответствиеИдентификаторов.Вставить(Выборка.ИдентификаторОбъектаВоВнешнейСистеме, Выборка.Объект);
		//КонецЦикла;
		
		//------------------------------
		СоответствиеОрганизаций = Новый Соответствие;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Расш1_НомерныеФонды.Ссылка КАК Ссылка,
		|	Расш1_НомерныеФонды.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Расш1_НомерныеФонды КАК Расш1_НомерныеФонды";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СоответствиеОрганизаций.Вставить(ВРег(Выборка.Наименование), Выборка.Ссылка);
		КонецЦикла;
		
		Для каждого Сотрудник Из МассивДанных Цикл
			
			ИдентификаторСотрудникаВЗУП = Сотрудник.GUID;
			Фамилия = Сотрудник.Фамилия;
			Имя = Сотрудник.Имя;
			Отчество = Сотрудник.Отчество;
			ДатаРождения = Сотрудник.ДатаРождения;
			ПолноеИмя = Сотрудник.ФИО;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Clients.Ссылка КАК Ссылка,
			|	Clients.ГУИДСотрудника КАК ГУИДСотрудника
			|ИЗ
			|	Справочник.Clients КАК Clients
			|ГДЕ
			|	Clients.FullName = &FullName
			|	И Clients.DateOfBirth = &DateOfBirth";
			
			Запрос.УстановитьПараметр("DateOfBirth", ДатаРождения);
			Запрос.УстановитьПараметр("FullName", ПолноеИмя);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ЗаписатьВРегистрИдентификатор = Истина;
			
			Если РезультатЗапроса.Пустой() Тогда
				
				ОбъектСотрудник = Справочники.Clients.СоздатьЭлемент();
				
			Иначе
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				СотрудникНайден = Ложь;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ВыборкаДетальныеЗаписи.ГУИДСотрудника = ИдентификаторСотрудникаВЗУП Тогда
						
						СотрудникНайден = Истина;
						ОбъектСотрудник = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ СотрудникНайден Тогда
					
					ВыборкаДетальныеЗаписи.Сбросить();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл	
						
						Если ПустаяСтрока(ВыборкаДетальныеЗаписи.ГУИДСотрудника) Тогда
							
							СотрудникНайден = Истина;
							ОбъектСотрудник = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если Не СотрудникНайден Тогда
					ОбъектСотрудник = Справочники.Clients.СоздатьЭлемент();
				КонецЕсли;
				
			КонецЕсли;
			
			
			//
			//НайденныйСотрудник = Неопределено;
			//
			//Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			//	НайденныйСотрудник = ВыборкаДетальныеЗаписи.Ссылка;
			//КонецЕсли;
			//
			//СсылкаСотрудникПоИдентификатору = СоответствиеИдентификаторов.Получить(ИдентификаторСотрудникаВЗУП);
			//
			//Если СсылкаСотрудникПоИдентификатору <> Неопределено Тогда
			//	
			//	ЗаписатьВРегистрИдентификатор = Ложь;
			//	ОбъектСотрудник = СсылкаСотрудникПоИдентификатору.ПолучитьОбъект();
			//	
			//ИначеЕсли СсылкаСотрудникПоИдентификатору = Неопределено и НайденныйСотрудник <> Неопределено Тогда
			//	
			//	ЗаписатьВРегистрИдентификатор = Ложь;
			//	ОбъектСотрудник = НайденныйСотрудник.ПолучитьОбъект();
			//	МенеджерЗаписи = РегистрыСведений.ИдентификаторыОбъектовВоВнешнихСистемах.СоздатьМенеджерЗаписи();
			//	МенеджерЗаписи.ВнешняяСистема = ВнешняяСистема;
			//	МенеджерЗаписи.ИдентификаторОбъектаВоВнешнейСистеме = ИдентификаторСотрудникаВЗУП;
			//	МенеджерЗаписи.Объект = НайденныйСотрудник;
			//	МенеджерЗаписи.Записать();
			//	
			//Иначе
			//	
			//	ОбъектСотрудник = Справочники.Clients.СоздатьЭлемент();
			//	ЗаписатьВРегистрИдентификатор = Истина;
			//	
			//КонецЕсли;
			
			Если Сотрудник.Пол = "Мужской" Тогда
				СсылкаПол = Перечисления.Sex.Male;
			ИначеЕсли Сотрудник.Пол = "Женский" Тогда
				СсылкаПол = Перечисления.Sex.Female;
			Иначе
				СсылкаПол = Перечисления.Sex.ПустаяСсылка();
			КонецЕсли;
			
			ОбъектСотрудник.Sex = СсылкаПол;
			ОбъектСотрудник.ТабельныйНомер = Сотрудник.ТабельныйНомер;
			ОбъектСотрудник.ДатаПриема = Сотрудник.ДатаПриема;
			ОбъектСотрудник.ДатаУвольнения = Сотрудник.ДатаУвольнения;
			ОбъектСотрудник.НомерТрудовогоДоговора = Сотрудник.ТрудовойДоговорНомер;
			ОбъектСотрудник.ДатаТрудовогоДоговора = Сотрудник.ТрудовойДоговорДата;
			ОбъектСотрудник.СрокДействияТрудовогоДоговора = Сотрудник.ДатаЗавершенияТрудовогоДоговора;
			ОбъектСотрудник.ГУИДСотрудника = ИдентификаторСотрудникаВЗУП;
			ОбъектСотрудник.DateOfBirth = ДатаРождения;
			ОбъектСотрудник.LastName = Фамилия;
			ОбъектСотрудник.FirstName = Имя;
			ОбъектСотрудник.SecondName = Отчество;
			ОбъектСотрудник.Position = Сотрудник.Должность;
			//ОбъектСотрудник.FullName = ПолноеИмя;
			
			Организация = Сотрудник.Филиал;
			Если ПустаяСтрока(Организация) Тогда
				Организация = Сотрудник.Организация;
			КонецЕсли;
			
			Если Не ПустаяСтрока(Организация) Тогда
				СсылкаНаОрганизацию = СоответствиеОрганизаций.Получить(ВРег(Организация));
				Если СсылкаНаОрганизацию = Неопределено Тогда
					СсылкаНаОрганизацию = СоздатьЭлементОрганизация(Организация);
					СоответствиеОрганизаций.Вставить(ВРег(Организация), СсылкаНаОрганизацию);
				КонецЕсли;
				
				ОбъектСотрудник.Организация = СсылкаНаОрганизацию;
			КонецЕсли;
			
			Если Не ПустаяСтрока(Сотрудник.ВидДокумента) Тогда
				СсылкаНаВидДокумента = СоответствиеВидовДокументов.Получить(ВРег(Сотрудник.ВидДокумента));
				Если СсылкаНаВидДокумента = Неопределено Тогда
					СсылкаНаВидДокумента = СоздатьЭлементВидДокумента(Сотрудник.ВидДокумента);
					СоответствиеВидовДокументов.Вставить(ВРег(Сотрудник.ВидДокумента), СсылкаНаВидДокумента);
				КонецЕсли;
				
				ОбъектСотрудник.IdentityDocumentType = СсылкаНаВидДокумента;
			КонецЕсли;
		
			ОбъектСотрудник.IdentityDocumentSeries = Сотрудник.Серия;
			ОбъектСотрудник.IdentityDocumentNumber = Сотрудник.Номер;
			ОбъектСотрудник.IdentityDocumentUnitCode = Сотрудник.КодПодразделения;
			ОбъектСотрудник.IdentityDocumentIssuedBy = Сотрудник.КемВыдан;
			ОбъектСотрудник.IdentityDocumentIssueDate = Сотрудник.ДатаВыдачи;
			ОбъектСотрудник.IdentityDocumentValidToDate = Сотрудник.СрокДействия;
			
			Если ПустаяСтрока(ОбъектСотрудник.ПолноеИмяEng) Тогда
				
				Если ПустаяСтрока(Сотрудник.НаименованиеАнглийскийЯзык) и ПустаяСтрока(Сотрудник.НаименованиеПолноеАнглийскийЯзык) Тогда
					ОбъектСотрудник.ПолноеИмяEng = ПолноеИмя;
				Иначе
					
					Если ПустаяСтрока(Сотрудник.НаименованиеПолноеАнглийскийЯзык) Тогда
						ОбъектСотрудник.ПолноеИмяEng = Сотрудник.НаименованиеАнглийскийЯзык;
					Иначе
						ОбъектСотрудник.ПолноеИмяEng = Сотрудник.НаименованиеПолноеАнглийскийЯзык;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(Сотрудник.Гражданство) Тогда
				СсылкаНаГражданство = СоответствиеГражданства.Получить(ВРег(Сотрудник.Гражданство));
				Если СсылкаНаГражданство = Неопределено Тогда
					СсылкаНаГражданство = Справочники.Countries.ПустаяСсылка();
					//СсылкаНаГражданство = СоздатьЭлементГражданство(Сотрудник.Гражданство);
					//СоответствиеГражданства.Вставить(Сотрудник.Гражданство, СсылкаНаГражданство);
				КонецЕсли;
				
				ОбъектСотрудник.Citizenship = СсылкаНаГражданство;
			КонецЕсли;
			
			Если ПустаяСтрока(ОбъектСотрудник.EMail) Тогда
				
				Если Не ПустаяСтрока(Сотрудник.ПочтаФизЛица) Тогда
					ОбъектСотрудник.EMail = Сотрудник.ПочтаФизЛица;
				ИначеЕсли Не ПустаяСтрока(Сотрудник.Почта) Тогда
					ОбъектСотрудник.EMail = Сотрудник.Почта;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПустаяСтрока(ОбъектСотрудник.Phone) Тогда
				
				Если Не ПустаяСтрока(Сотрудник.РабочийТелефон) Тогда
					ОбъектСотрудник.Phone = Сотрудник.РабочийТелефон;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПустаяСтрока(ОбъектСотрудник.Fax) Тогда
				
				Если Не ПустаяСтрока(Сотрудник.МобильныйТелефон) Тогда
					ОбъектСотрудник.Fax = Сотрудник.МобильныйТелефон;
				КонецЕсли;
				
			КонецЕсли;
		
			ОбъектСотрудник.ЗагруженИзЗУП = Истина;
			ОбъектСотрудник.ДатаЗагрузкиОбновления = ТекущаяДата();
			ОбъектСотрудник.ПометкаУдаления = Ложь;	
			ОбъектСотрудник.Записать();
			
			МенеджерЗаписи = РегистрыСведений.СостоянияСотрудников.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Сотрудник = ОбъектСотрудник.Ссылка;
			МенеджерЗаписи.Состояние = Сотрудник.Состояние;
			МенеджерЗаписи.ДействуетДо = Сотрудник.СостояниеДействуетДо;
			МенеджерЗаписи.Записать();
			
			Если ЗаписатьВРегистрИдентификатор Тогда
				
				МенеджерЗаписи = РегистрыСведений.ИдентификаторыОбъектовВоВнешнихСистемах.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ВнешняяСистема = ВнешняяСистема;
				МенеджерЗаписи.ИдентификаторОбъектаВоВнешнейСистеме = ИдентификаторСотрудникаВЗУП;
				МенеджерЗаписи.Объект = ОбъектСотрудник.Ссылка;
				МенеджерЗаписи.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		МассивОшибок.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если МассивОшибок.Количество() = 0 Тогда
		Ответ = Новый HTTPСервисОтвет(200);
	Иначе
		Ответ = Новый HTTPСервисОтвет(405);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		ЗаписатьJSON(ЗаписьJSON, МассивОшибок);
		СтрокаОшибокJSON = ЗаписьJSON.Закрыть();
		
		ЗаписьИстории.Вставить("ТелоОтвета", Новый ХранилищеЗначения(СтрокаОшибокJSON));
		Ответ.УстановитьТелоИзСтроки(СтрокаОшибокJSON, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		
	КонецЕсли;
	Ответ.Заголовки.Вставить("Content-type","application/json; charset=utf-8");
	
	ЗаписьИстории.Вставить("КодОтвета", Ответ.КодСостояния);
	
	РегистрыСведений.ИсторияОбменовСВнешнимиСистемами.ЗаписатьДанные(ЗаписьИстории);
	
	Если МассивОшибок.Количество() = 0 Тогда
		
		// Удаляем старыеЗаписи
		
		Выборка = РегистрыСведений.ИсторияОбменовСВнешнимиСистемами.Выбрать(, ТекущаяДата() - 7*86400);
		Пока Выборка.Следующий() Цикл
			Выборка.ПолучитьМенеджерЗаписи().Удалить();
		КонецЦикла;	
			
	КонецЕсли;

	Возврат Ответ;
	
КонецФункции

Функция ПолучитьЗаголовкиHTTPКакСтроку(Заголовки, Разделитель = ";", ИсключитьПустые = Истина)
	
	Результат = "";
	ПервыйКлюч = Истина;
	
	Для Каждого КлючЗначение Из Заголовки Цикл
		
		Ключ = СокрЛП(КлючЗначение.Ключ);
		Значение = СокрЛП(ключЗначение.Значение);
		
		Если ИсключитьПустые И ПустаяСтрока(Ключ) Тогда
			Продолжить;
		Иначе
			Результат = ?(ПервыйКлюч, "", Разделитель) + Ключ + " = " + Значение;
			ПервыйКлюч = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМетаданные(HTTPЗапрос)
	
	URL = HTTPЗапрос.БазовыйURL + HTTPЗапрос.ОтносительныйURL;
	СтрокаПараметры = "";
	
	Для Каждого ПараметрЗапроса Из HTTPЗапрос.ПараметрыЗапроса Цикл
		СтрокаПараметры = СтрокаПараметры + ?(ПустаяСтрока(СтрокаПараметры), "?", "&") + ПараметрЗапроса.Ключ + "=" + ПараметрЗапроса.Значение;	
	КонецЦикла;
	
	Возврат URL + СтрокаПараметры;
	
КонецФункции

Функция СоздатьЭлементОрганизация(НаименованиеОрганизации)
	
	ОбъектОрганизация = Справочники.Расш1_НомерныеФонды.СоздатьЭлемент();
	ОбъектОрганизация.Наименование = НаименованиеОрганизации;
	ОбъектОрганизация.ЗагруженИзЗУП = Истина;	
	ОбъектОрганизация.Записать();
	
	Возврат ОбъектОрганизация.Ссылка;
	
КонецФункции

Функция СоздатьЭлементВидДокумента(НаименованиеВидаДокумента)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(IdentityDocumentTypes.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.IdentityDocumentTypes КАК IdentityDocumentTypes
		|ГДЕ
		|	ПОДСТРОКА(IdentityDocumentTypes.Код, 1, 3) = ""ЗУП""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	Количество  = ВыборкаДетальныеЗаписи.Количество; 

	ОбъектВидДокумента = Справочники.IdentityDocumentTypes.СоздатьЭлемент();
	ОбъектВидДокумента.Наименование = НаименованиеВидаДокумента;
	ОбъектВидДокумента.Код = "ЗУП" + Строка(Количество+1);
	ОбъектВидДокумента.Записать();
	
	Возврат ОбъектВидДокумента.Ссылка;
	
КонецФункции

Функция СоздатьЭлементГражданство(НаименованиеГражданство)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КОЛИЧЕСТВО(Countries.Ссылка) КАК Количество
	//	|ИЗ
	//	|	Справочник.Countries КАК Countries
	//	|ГДЕ
	//	|	ПОДСТРОКА(Countries.Код, 1, 1) = ""З""";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//ВыборкаДетальныеЗаписи.Следующий();
	//Количество  = ВыборкаДетальныеЗаписи.Количество; 
	//
	//ОбъектГражданство = Справочники.Countries.СоздатьЭлемент();
	//ОбъектГражданство.Наименование = НаименованиеГражданство;
	//ОбъектГражданство.Код = "З" + Строка(Количество+1);
	//ОбъектГражданство.Записать();
	//
	//Возврат ОбъектГражданство.Ссылка;
	
КонецФункции