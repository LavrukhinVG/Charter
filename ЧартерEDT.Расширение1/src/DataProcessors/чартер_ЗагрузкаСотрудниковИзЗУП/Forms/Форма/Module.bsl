
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	ФункциональныйБлок = Справочники.чартер_ФункциональныеБлоки.НайтиПоКоду("000000001");	
	ЛогЗагрузки.Параметры.УстановитьЗначениеПараметра("ФункциональныйБлок", ФункциональныйБлок);
	ЛогЗагрузки.Параметры.УстановитьЗначениеПараметра("Период", ТекущаяДатаСеанса());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
АСИНХ Процедура ЗагрузитьСотрудников(Команда)
	
    ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
    ПараметрыДиалога.Заголовок = "НачатьПомещениеФайлаНаСервер";
    ПараметрыДиалога.МножественныйВыбор = Истина;
    ПараметрыДиалога.Фильтр = НСтр("en = 'Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'; 
    								|ru = 'Файл таблицы Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'");
	ПрогрессОбратныйВызов = Новый ОписаниеОповещения("ПрогрессОбратныйВызов", ЭтотОбъект);
    ПередНачалоОбратныйВызов = Новый ОписаниеОповещения("ПередНачалоОбратныйВызов", ЭтотОбъект);
	ОписаниеПомещенногоФайла = ЖДАТЬ ПоместитьФайлНаСерверАсинх(ПрогрессОбратныйВызов, ПередНачалоОбратныйВызов, 
																	, ПараметрыДиалога);
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ОбработатьЗагруженныйФайл(ОписаниеПомещенногоФайла.Адрес); 		
	Оповестить("ОбновлениеСотрудниковЗУП");
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыбратьВсех(Команда)
	
	Для каждого Строка Из Объект.ДанныеДляОбработки Цикл		
		Если Строка.СтатусОбработки Тогда
			Продолжить;
		Иначе
			Строка.СтатусОбработки = Истина;
		КонецЕсли;                         		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыбор(Команда)

	Для каждого Строка Из Объект.ДанныеДляОбработки Цикл		
		Если Не Строка.СтатусОбработки Тогда
			Продолжить;
		Иначе
			Строка.СтатусОбработки = Ложь;
		КонецЕсли;                         		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКарточкиСотрудников(Команда)
	
	СоздатьКарточкиСотрудниковНаСервере();
	Оповестить("ОбновлениеСотрудниковЗУП");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    Состояние("Файл " + ПомещаемыйФайл.Имя, Помещено, "Файл имеет размер " + ПомещаемыйФайл.Размер() + " байт"
    																					, БиблиотекаКартинок.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачалоОбратныйВызов(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    //Сообщить("Помещаемый файл - " + ПомещаемыйФайл.Имя + ", размер = " + ПомещаемыйФайл.Размер());
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗагруженныйФайл(Адрес)
	
	Данные = ПолучитьИзВременногоХранилища(Адрес);
		
	ИмяФайлаВременное = ПолучитьИмяВременногоФайла("xlsx");
	Данные.Записать(ИмяФайлаВременное);
	НомерЛистаExcel = 1;	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТаблицаОбластей = Новый ТаблицаЗначений;
	ТаблицаОбластей.Колонки.Добавить("Имя");
	ТаблицаОбластей.Колонки.Добавить("Верх");
    
	Попытка
		
		ТабличныйДокумент.Прочитать(ИмяФайлаВременное, СпособЧтенияЗначенийТабличногоДокумента.Значение);
		ТабличныйДокумент.ПоказатьУровеньГруппировокКолонок(999);
		ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(999);
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаОбластей.Добавить(), Область);
		КонецЦикла;
		
		ТаблицаОбластей.Сортировать("Верх");
		
		Если ТаблицаОбластей.Количество() < НомерЛистаExcel Тогда
			чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю(СтрШаблон("Лист под номером %1 не найден"
																								, НомерЛистаExcel));			
			Возврат;
		Иначе					
			ПоследняяСтрока   = ТабличныйДокумент.ВысотаТаблицы;
		    ПоследняяКолонка  = ТабличныйДокумент.ШиринаТаблицы;
		    ОбластьЯчеек      = ТабличныйДокумент.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка);
			ИсточникДанных    = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
		    ПостроительОтчета = Новый ПостроительОтчета;
		    ПостроительОтчета.ИсточникДанных = ИсточникДанных;
		    ПостроительОтчета.Выполнить();
			ТабЗначений = ПостроительОтчета.Результат.Выгрузить(); 
			
			Если ТабЗначений.Количество() > 0 Тогда
				СоздатьСотрудниковВСправочнике(ТабЗначений);
			Иначе
				чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю("В выбранном файле нет сотрудников для загрузки!");		    				
				Возврат;
			КонецЕсли;
			
			ТабличныйДокумент = Неопределено;
		КонецЕсли;    				
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры     

&НаСервере
Процедура СоздатьСотрудниковВСправочнике(ТабЗначений)
	
	// ************************************************** //
	// Если нет сотрудника до создаем                 	  //
	// Если нашли и это полный дубль игнорируем запись    //
	// Если частичный дубль - обноляем найденную запись   // 
	// ************************************************** //

	Запрос		 = Новый Запрос;
	Запрос.Текст = ЗапросАнализаСотрудников();
    Запрос.УстановитьПараметр("СотрудникиИзФайла", ТабЗначений);  
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Создадим всех новых сотрудников
	Если НЕ МассивРезультатов[3].Пустой() Тогда
		СоздатьСотрудников(МассивРезультатов[3].Выгрузить());
	КонецЕсли;
	
	// Если сотрудник найден в базе, но не все его данные совпали
	// проводим автоматическое обновление, и пишем лог события (на постоянное хранение).	
	Если НЕ МассивРезультатов[4].Пустой() Тогда
		ОбновитьСотрудников(МассивРезультатов[4].Выгрузить());
	КонецЕсли; 
	
	Элементы.ЛогЗагрузки.Обновить();
	
	чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю("Список сотрудников обработан.");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапросАнализаСотрудников()

	ЗапросТекст = "ВЫБРАТЬ
				|	СотрудникиИзФайла.UUID КАК UUID,
				|	СотрудникиИзФайла.Организация КАК Организация,
				|	СотрудникиИзФайла.ТабельныйНомер КАК ТабельныйНомер,
				|	СотрудникиИзФайла.Сотрудник КАК Сотрудник,
				|	СотрудникиИзФайла.ФИОАнгл КАК ФИОАнглийское,
				|	СотрудникиИзФайла.Должность КАК Должность,
				|	СотрудникиИзФайла.Подразделение КАК Подразделение,
				|	СотрудникиИзФайла.EMail КАК EMail
				|ПОМЕСТИТЬ втСотрудникиКЗагрузке
				|ИЗ
				|	&СотрудникиИзФайла КАК СотрудникиИзФайла
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Организация
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втСотрудникиКЗагрузке.UUID КАК UUID,
				|	втСотрудникиКЗагрузке.ТабельныйНомер КАК ТабельныйНомер,
				|	втСотрудникиКЗагрузке.Сотрудник КАК ФИО,
				|	втСотрудникиКЗагрузке.ФИОАнглийское КАК ФИОАнглийское,
				|	втСотрудникиКЗагрузке.Должность КАК Должность,
				|	втСотрудникиКЗагрузке.Подразделение КАК Подразделение,
				|	втСотрудникиКЗагрузке.EMail КАК EMail,
				|	чартер_Организации.Ссылка КАК Организация
				|ПОМЕСТИТЬ втСотрудниОрганизации
				|ИЗ
				|	втСотрудникиКЗагрузке КАК втСотрудникиКЗагрузке
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.чартер_Организации КАК чартер_Организации
				|		ПО втСотрудникиКЗагрузке.Организация = чартер_Организации.Наименование
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	UUID
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втСотрудниОрганизации.UUID КАК UUIDФайл,
				|	чартер_Сотрудники.UUIDЗУП КАК UUIDСпрСотрудники,
				|	втСотрудниОрганизации.Организация КАК ОрганизацияФайл,
				|	втСотрудниОрганизации.ТабельныйНомер КАК ТабельныйНомерФайл,
				|	втСотрудниОрганизации.ФИО КАК ФИОФайл,
				|	втСотрудниОрганизации.ФИОАнглийское КАК ФИОАнглийскоеФайл,
				|	втСотрудниОрганизации.Должность КАК ДолжностьФайл,
				|	втСотрудниОрганизации.Подразделение КАК ПодразделениеФайл,
				|	втСотрудниОрганизации.EMail КАК EMailФайл,
				|	ВЫБОР
				|		КОГДА втСотрудниОрганизации.UUID = чартер_Сотрудники.UUIDЗУП
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК СотрудникЗагружался,
				|	ВЫБОР
				|		КОГДА втСотрудниОрганизации.ТабельныйНомер = чартер_Сотрудники.ТабельныйНомер
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ПроверкаТН,
				|	ВЫБОР
				|		КОГДА втСотрудниОрганизации.ФИО = чартер_Сотрудники.Наименование
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ПроверкаФИО,
				|	ВЫБОР
				|		КОГДА втСотрудниОрганизации.ФИОАнглийское = чартер_Сотрудники.ФИОАнглийское
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ПроверкаФИОАнглийское,
				|	ВЫБОР
				|		КОГДА втСотрудниОрганизации.Должность = чартер_Сотрудники.Должность
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ПроверкаДолжности,
				|	ВЫБОР
				|		КОГДА втСотрудниОрганизации.Подразделение = чартер_Сотрудники.Подразделение
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ПроверкаПодразделения,
				|	ВЫБОР
				|		КОГДА втСотрудниОрганизации.EMail = чартер_Сотрудники.EMail
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ПроверкаEMail,
				|	чартер_Сотрудники.СтатусСотрудникаВОрганизации КАК СтатусСотрудникаВОрганизации
				|ПОМЕСТИТЬ втНовыеИСтарыеСтрудники
				|ИЗ
				|	втСотрудниОрганизации КАК втСотрудниОрганизации
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.чартер_Сотрудники КАК чартер_Сотрудники
				|		ПО втСотрудниОрганизации.UUID = чартер_Сотрудники.UUIDЗУП
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	СотрудникЗагружался,
				|	ПроверкаФИО,
				|	ПроверкаФИОАнглийское,
				|	ПроверкаТН,
				|	ПроверкаДолжности,
				|	ПроверкаПодразделения,
				|	ПроверкаEMail
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втНовыеИСтарыеСтрудники.UUIDФайл КАК UUIDЗУП,
				|	втНовыеИСтарыеСтрудники.ОрганизацияФайл КАК Организация,
				|	втНовыеИСтарыеСтрудники.ТабельныйНомерФайл КАК ТабельныйНомер,
				|	втНовыеИСтарыеСтрудники.ФИОФайл КАК Наименование,
				|	втНовыеИСтарыеСтрудники.ФИОАнглийскоеФайл КАК ФИОАнглийское,
				|	втНовыеИСтарыеСтрудники.ДолжностьФайл КАК Должность,
				|	втНовыеИСтарыеСтрудники.ПодразделениеФайл КАК Подразделение,
				|	втНовыеИСтарыеСтрудники.EMailФайл КАК EMail,
				|	втНовыеИСтарыеСтрудники.СтатусСотрудникаВОрганизации КАК СтатусСотрудникаВОрганизации
				|ИЗ
				|	втНовыеИСтарыеСтрудники КАК втНовыеИСтарыеСтрудники
				|ГДЕ
				|	НЕ втНовыеИСтарыеСтрудники.СотрудникЗагружался
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втНовыеИСтарыеСтрудники.UUIDФайл КАК UUIDЗУП,
				|	втНовыеИСтарыеСтрудники.ОрганизацияФайл КАК Организация,
				|	втНовыеИСтарыеСтрудники.ТабельныйНомерФайл КАК ТабельныйНомер,
				|	втНовыеИСтарыеСтрудники.ФИОФайл КАК Наименование,
				|	втНовыеИСтарыеСтрудники.ФИОАнглийскоеФайл КАК ФИОАнглийское,
				|	втНовыеИСтарыеСтрудники.ДолжностьФайл КАК Должность,
				|	втНовыеИСтарыеСтрудники.ПодразделениеФайл КАК Подразделение,
				|	втНовыеИСтарыеСтрудники.EMailФайл КАК EMail,
				|	втНовыеИСтарыеСтрудники.СтатусСотрудникаВОрганизации КАК СтатусСотрудникаВОрганизации
				|ИЗ
				|	втНовыеИСтарыеСтрудники КАК втНовыеИСтарыеСтрудники
				|ГДЕ
				|	втНовыеИСтарыеСтрудники.СотрудникЗагружался
				|	И (НЕ втНовыеИСтарыеСтрудники.ПроверкаТН
				|	ИЛИ НЕ втНовыеИСтарыеСтрудники.ПроверкаФИО
				|	ИЛИ НЕ втНовыеИСтарыеСтрудники.ПроверкаФИОАнглийское
				|	ИЛИ НЕ втНовыеИСтарыеСтрудники.ПроверкаДолжности
				|	ИЛИ НЕ втНовыеИСтарыеСтрудники.ПроверкаПодразделения
				|	ИЛИ НЕ втНовыеИСтарыеСтрудники.ПроверкаEMail)";	
	
	Возврат ЗапросТекст;	
	
КонецФункции

&НаСервере
Процедура СоздатьСотрудников(СписокСотрудников)
	
	УстановитьПривилегированныйРежим(Истина);                   	
	СтруктураЗаписиЛога = Новый Структура;
	СтруктураЗаписиЛога.Вставить("ФункциональныйБлок", ФункциональныйБлок);
	Секунда = 1;
		
	Для каждого Сотрудник Из СписокСотрудников Цикл
		
		Если Не ЗначениеЗаполнено(Сотрудник.Организация) Тогда 
			ТекстСообщения = СтрШаблон("не найдена организация у сотрудника с табельным номером: %1", Сотрудник.ТабельныйНомер);
			чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;               
		Если Сотрудник.UUIDЗУП = "" Тогда 
			ТекстСообщения = СтрШаблон("Сотрудник %1 не найден раннее загруженным в ЗУП!", Сотрудник.ТабельныйНомер);
			чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;     
		
		// *************** поиск сотрудника среди заведенных руками временных *************//				
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", Сотрудник.Организация);
		СтруктураПоиска.Вставить("ФИО", СокрЛП(Сотрудник.Наименование));
		// TODO: переписать запрос в цикле (технический долг)  - поиск сотрудника вынести в запрос.
		ПоискСотрудника = ПоискПоФИОиОрг(СтруктураПоиска); 
		
		Если НЕ ПоискСотрудника = Неопределено Тогда
			ОбновитьВременнуюКарточкуСотрудника(ПоискСотрудника, Сотрудник);			
			чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю("Обновлена карточка временного сотрудника " 
																		+ Сотрудник.Наименование);
			Продолжить;
		КонецЕсли;
		// ********************************************************************************//      	
		НовыйСотрудник = Справочники.чартер_Сотрудники.СоздатьЭлемент();
		
		НовыйСотрудник.UUIDЗУП = Сотрудник.UUIDЗУП;
		НовыйСотрудник.СтатусСотрудникаВОрганизации = Перечисления.чартер_СтатусСотрудникаВОрганизации.Сотрудник;
		ЗаполнитьЗначенияСвойств(НовыйСотрудник, Сотрудник, , "СтатусСотрудникаВОрганизации");
		
		Попытка			
			НовыйСотрудник.Записать();		
			
			СтруктураЗаписиЛога.Вставить("Период", ТекущаяДатаСеанса() + Секунда);			
			СтруктураЗаписиЛога.Вставить("ТипСобытия", Перечисления.чартер_ТипСобытияЛога.Событие);
			СтруктураЗаписиЛога.Вставить("ОписаниеСобытия", СтрШаблон("Создана новая карточка сотрудника ФИО: %1, ТН: %2"
																		, Сотрудник.Наименование, Сотрудник.ТабельныйНомер));
		Исключение
			чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю(ОписаниеОшибки());
			
			СтруктураЗаписиЛога.Вставить("Период", ТекущаяДатаСеанса() + Секунда);			
			СтруктураЗаписиЛога.Вставить("ТипСобытия", Перечисления.чартер_ТипСобытияЛога.Ошибка);			
			СтруктураЗаписиЛога.Вставить("ОписаниеСобытия", 
											СтрШаблон("Ошибка создания карточки сотрудника ФИО: %1, ТН: %2, Ошибка: %3"
											, Сотрудник.Наименование, Сотрудник.ТабельныйНомер, ОписаниеОшибки()));			
			Продолжить;
		КонецПопытки; 
		
		РегистрыСведений.чартер_ЛогСобытий.ДобавитьЗаписьВЛог(СтруктураЗаписиЛога); 		
		Секунда = Секунда + 1;
	КонецЦикла; 
		
	чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю("Сортрудники из файла созданы.");	 
	Объект.ДанныеДляОбработки.Очистить();
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьВременнуюКарточкуСотрудника(ПоискСотрудника, СотрудникЗУП)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураЗаписиЛога = Новый Структура;
	СтруктураЗаписиЛога.Вставить("ФункциональныйБлок", ФункциональныйБлок);
    
	СотрудникОбъект = ПоискСотрудника.ПолучитьОбъект(); 
	
	СотрудникОбъект.UUIDЗУП  	      			 = СотрудникЗУП.UUIDЗУП;
	СотрудникОбъект.ТабельныйНомер 	  			 = СотрудникЗУП.ТабельныйНомер;
	СотрудникОбъект.Наименование  	  			 = СотрудникЗУП.Наименование;
	СотрудникОбъект.ФИОАнглийское     		 	 = СотрудникЗУП.ФИОАнглийское;
	СотрудникОбъект.Должность 	  	  			 = СотрудникЗУП.Должность;
	СотрудникОбъект.Подразделение 	  			 = СотрудникЗУП.Подразделение;
	СотрудникОбъект.EMail 	  		  			 = СотрудникЗУП.EMail;		
	СотрудникОбъект.СтатусСотрудникаВОрганизации = Перечисления.чартер_СтатусСотрудникаВОрганизации.Сотрудник;
	
	Попытка
		СотрудникОбъект.Записать();
		
		СтруктураЗаписиЛога.Вставить("Период", ТекущаяДатаСеанса());			
		СтруктураЗаписиЛога.Вставить("ТипСобытия", Перечисления.чартер_ТипСобытияЛога.Событие);
		СтруктураЗаписиЛога.Вставить("ОписаниеСобытия", СтрШаблон("Обновлена карточка сотрудника ФИО: %1, ТН: %2"
		, СотрудникЗУП.Наименование, СотрудникЗУП.ТабельныйНомер));			
	Исключение
		ТекстСообщения = СтрШаблон("Ошибка обновления карточки сотрудника ФИО: %1, ТН: %2, Ошибка: %3"
		, СотрудникЗУП.Наименование, СотрудникЗУП.ТабельныйНомер, ОписаниеОшибки());
		чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю(ОписаниеОшибки());
		
		СтруктураЗаписиЛога.Вставить("Период", ТекущаяДатаСеанса());			
		СтруктураЗаписиЛога.Вставить("ТипСобытия", Перечисления.чартер_ТипСобытияЛога.Ошибка);			
		СтруктураЗаписиЛога.Вставить("ОписаниеСобытия", ТекстСообщения);			
	КонецПопытки;
	
	РегистрыСведений.чартер_ЛогСобытий.ДобавитьЗаписьВЛог(СтруктураЗаписиЛога);            
	 
КонецПроцедуры

&НаСервере
Функция ПоискПоФИОиОрг(СтруктураПоиска, Результат = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	чартер_Сотрудники.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.чартер_Сотрудники КАК чартер_Сотрудники
	               |ГДЕ
	               |	чартер_Сотрудники.Организация = &Организация
	               |	И чартер_Сотрудники.Наименование = &ФИО
	               |	И НЕ чартер_Сотрудники.СтатусСотрудникаВОрганизации = ЗНАЧЕНИЕ(Перечисление.чартер_СтатусСотрудникаВОрганизации.Сотрудник)";
	
	Запрос.УстановитьПараметр("Организация", СтруктураПоиска.Организация);
	Запрос.УстановитьПараметр("ФИО", СтруктураПоиска.ФИО);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.Ссылка;		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьСотрудников(СписокСотрудников)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураЗаписиЛога = Новый Структура;
	СтруктураЗаписиЛога.Вставить("ФункциональныйБлок", ФункциональныйБлок);
	Секунда = 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокСотрудников.UUIDЗУП КАК UUIDЗУП,
	               |	СписокСотрудников.Организация КАК Организация,
	               |	СписокСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	               |	СписокСотрудников.Наименование КАК Наименование,
	               |	СписокСотрудников.ФИОАнглийское КАК ФИОАнглийское,
	               |	СписокСотрудников.Должность КАК Должность,
	               |	СписокСотрудников.Подразделение КАК Подразделение,
	               |	СписокСотрудников.EMail КАК EMail
	               |ПОМЕСТИТЬ втСписокСотрудников
	               |ИЗ
	               |	&СписокСотрудников КАК СписокСотрудников
	               |ГДЕ
	               |	НЕ СписокСотрудников.UUIDЗУП = """"
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	UUIDЗУП
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втСписокСотрудников.UUIDЗУП КАК UUIDЗУП,
	               |	чартер_Сотрудники.Ссылка КАК Ссылка,
	               |	втСписокСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	               |	втСписокСотрудников.Наименование КАК Наименование,
	               |	втСписокСотрудников.ФИОАнглийское КАК ФИОАнглийское,
	               |	втСписокСотрудников.Должность КАК Должность,
	               |	втСписокСотрудников.Подразделение КАК Подразделение,
	               |	втСписокСотрудников.EMail КАК Email
	               |ИЗ
	               |	втСписокСотрудников КАК втСписокСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.чартер_Сотрудники КАК чартер_Сотрудники
	               |		ПО втСписокСотрудников.UUIDЗУП = чартер_Сотрудники.UUIDЗУП";
	
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Результат = Запрос.Выполнить();     
	
	Выборка = Результат.Выбрать();	
	Пока Выборка.Следующий() Цикл       
		                                                      			
		СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();		
		
		СотрудникОбъект.UUIDЗУП  	      			 = Выборка.UUIDЗУП;
		СотрудникОбъект.ТабельныйНомер 	  			 = Выборка.ТабельныйНомер;
		СотрудникОбъект.Наименование  	  			 = Выборка.Наименование;
		СотрудникОбъект.ФИОАнглийское     		 	 = Выборка.ФИОАнглийское;		
		СотрудникОбъект.Должность 	  	  			 = Выборка.Должность;
		СотрудникОбъект.Подразделение 	  			 = Выборка.Подразделение;
		СотрудникОбъект.EMail 	  		  			 = Выборка.EMail;		
		СотрудникОбъект.СтатусСотрудникаВОрганизации = Перечисления.чартер_СтатусСотрудникаВОрганизации.Сотрудник;
		
		Попытка
			СотрудникОбъект.Записать();
			
			СтруктураЗаписиЛога.Вставить("Период", ТекущаяДатаСеанса() + Секунда);			
			СтруктураЗаписиЛога.Вставить("ТипСобытия", Перечисления.чартер_ТипСобытияЛога.Событие);
			СтруктураЗаписиЛога.Вставить("ОписаниеСобытия", СтрШаблон("Обновлена карточка сотрудника ФИО: %1, ТН: %2"
																		, Выборка.Наименование, Выборка.ТабельныйНомер));			
		Исключение
			ТекстСообщения = СтрШаблон("Ошибка обновления карточки сотрудника ФИО: %1, ТН: %2, Ошибка: %3"
										, Выборка.Наименование, Выборка.ТабельныйНомер, ОписаниеОшибки());
		    чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю(ОписаниеОшибки());

			СтруктураЗаписиЛога.Вставить("Период", ТекущаяДатаСеанса() + Секунда);			
			СтруктураЗаписиЛога.Вставить("ТипСобытия", Перечисления.чартер_ТипСобытияЛога.Ошибка);			
			СтруктураЗаписиЛога.Вставить("ОписаниеСобытия", ТекстСообщения);			
		КонецПопытки;
																	
		РегистрыСведений.чартер_ЛогСобытий.ДобавитьЗаписьВЛог(СтруктураЗаписиЛога);                																	
		Секунда = Секунда + 1;
	КонецЦикла;
	
	чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю("Сортрудники из файла обновлены.");
				 
КонецПроцедуры

&НаСервере
Процедура СоздатьКарточкиСотрудниковНаСервере()
	
	ТаблицаСотрудников = ПолучитьСтруктуруТаблицыСотрудники();
	
	Для каждого Сотрудник Из Объект.ДанныеДляОбработки Цикл
		Если Сотрудник.СтатусОбработки Тогда
			НоваяСтрока = ТаблицаСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТаблицаСотрудников) Тогда
		СоздатьСотрудников(ТаблицаСотрудников);
	Иначе
		ТекстСообщения = "Не выбраны сотрудники для создания";
		чартеры_ОбщиеПроцедурыИФункцииСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры     

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруТаблицыСотрудники()
	
	ТабЗначений = Новый ТаблицаЗначений;

	ТабЗначений.Колонки.Добавить("UUIDЗУП", Новый ОписаниеТипов("строка"));	
	ТабЗначений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.чартер_Организации"));
	ТабЗначений.Колонки.Добавить("ТабельныйНомер", Новый ОписаниеТипов("строка"));	
	ТабЗначений.Колонки.Добавить("Наименование", Новый ОписаниеТипов("строка"));	
	ТабЗначений.Колонки.Добавить("ФИОАнглийское", Новый ОписаниеТипов("строка"));
	ТабЗначений.Колонки.Добавить("Должность", Новый ОписаниеТипов("строка"));	
	ТабЗначений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("строка"));
	ТабЗначений.Колонки.Добавить("EMail", Новый ОписаниеТипов("строка"));
	ТабЗначений.Колонки.Добавить("СтатусСотрудникаВОрганизации"
									, Новый ОписаниеТипов("ПеречислениеСсылка.чартер_СтатусСотрудникаВОрганизации"));
	ТабЗначений.Колонки.Добавить("СтатусОбработки", Новый ОписаниеТипов("Булево"));	
		
	Возврат ТабЗначений;
	
КонецФункции

#КонецОбласти