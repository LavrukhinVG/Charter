
&НаКлиенте
Процедура СоздатьСубподрядчиков(Команда)
	
	Если Не ЗначениеЗаполнено(НомерПервойСтроки) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан номер первой строки";
		Сообщение.Поле = "НомерПервойСтроки";
		Сообщение.Сообщить();		
		Возврат;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаПодрядчиков) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан номер колонки с подрядчиками";
		Сообщение.Поле = "КолонкаПодрядчиков";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПрочитатьСубподрядчиковНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСубподрядчиковНаСервере()
	
	МассивПодрядчиков = Новый Массив;
	
	Для НомерСтроки = НомерПервойСтроки По ТабДок.ВысотаТаблицы Цикл
		
		НаименованиеПодрядчика = ПолучитьЗначениеИзСтроки(НомерСтроки, КолонкаПодрядчиков);
		
		Если Не ПустаяСтрока(НаименованиеПодрядчика) Тогда
			
			Индекс = МассивПодрядчиков.Найти(НаименованиеПодрядчика);
			
			Если Индекс = Неопределено Тогда
				МассивПодрядчиков.Добавить(НаименованиеПодрядчика);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = СоздатьПодрядчиковНаСервере(МассивПодрядчиков);
	
	Если Результат = Неопределено Тогда
		Сообщить("В базе все подрядчики из файла присутствуют.");
	Иначе
		
		Для каждого Элемент Из Результат Цикл
			
			Сообщить("Создан подрядчик " + Элемент);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПодрядчиковНаСервере(МассивПодрядчиков)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расш1_НомерныеФонды.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Расш1_НомерныеФонды КАК Расш1_НомерныеФонды";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Индекс = МассивПодрядчиков.Найти(Выборка.Наименование);
		
		Если Индекс <> Неопределено Тогда
			МассивПодрядчиков.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПодрядчиков.Количество()= 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для каждого Элемент Из МассивПодрядчиков Цикл
		
		СправочникОбъект = Справочники.Расш1_НомерныеФонды.СоздатьЭлемент();
		
		СправочникОбъект.Наименование = Элемент;
		
		СправочникОбъект.Записать();
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНомера(Команда)
	
	ОчиститьСообщения();
	
	СоздатьНомераНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНомераНаСервере()
	
	Если Не ЗначениеЗаполнено(Дом) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан номер дома";
		Сообщение.Поле = "Дом";
		Сообщение.Сообщить();		
		Возврат;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерПервойСтроки) Тогда	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан номер первой строки";
		Сообщение.Поле = "НомерПервойСтроки";
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаПодрядчиков) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан номер колонки с подрядчиками";
		Сообщение.Поле = "КолонкаПодрядчиков";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаКвартиры) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан номер колонки с квартирами";
		Сообщение.Поле = "КолонкаКвартиры";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаКомнат) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан номер колонки с комнатами";
		Сообщение.Поле = "КолонкаКомнат";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипНомера) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан тип номера";
		Сообщение.Поле = "ТипНомера";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаСотрудников) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан номер колонки с сотрудниками";
		Сообщение.Поле = "КолонкаСотрудников";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаДолжностей) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан номер колонки с должностями";
		Сообщение.Поле = "КолонкаДолжностей";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
		
	ПрочитатьДанныеТабДок();
	
	Сообщить("Выполнено");
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьДанныеТабДок()
	
	Гостиница = Дом.Владелец;
	
	ТЗ_Номера = Новый ТаблицаЗначений;
	
	ТЗ_Номера.Колонки.Добавить("Подрядчик", Новый ОписаниеТипов("СправочникСсылка.Расш1_НомерныеФонды"));
	ТЗ_Номера.Колонки.Добавить("Дом", Новый ОписаниеТипов("СправочникСсылка.Rooms"));
	ТЗ_Номера.Колонки.Добавить("Квартира", Новый ОписаниеТипов("Строка"));
	ТЗ_Номера.Колонки.Добавить("Номер", Новый ОписаниеТипов("СправочникСсылка.Rooms"));
	ТЗ_Номера.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число"));
	ТЗ_Номера.Колонки.Добавить("НомерКомнаты", Новый ОписаниеТипов("Строка"));
	ТЗ_Номера.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Clients"));
	
	СоответствиеПодрядчик = Новый Соответствие;
	//СоответствиеНаименованиеКвартиры = Новый Соответствие;
	
	НаименованиеКвартиры = "";
	НаименованиеПодрядчика = "";
	
	Для НомерСтроки = НомерПервойСтроки По ТабДок.ВысотаТаблицы Цикл
		
		НоваяСтрока = ТЗ_Номера.Добавить();
		
		НаименованиеПодрядчикаИзСтроки = ПолучитьЗначениеИзСтроки(НомерСтроки, КолонкаПодрядчиков);
		
		Если Не ПустаяСтрока(НаименованиеПодрядчикаИзСтроки) Тогда		
			НаименованиеПодрядчика = НаименованиеПодрядчикаИзСтроки;			
		КонецЕсли;
		
		НаименованиеКвартирыИзСтроки = ПолучитьЗначениеИзСтроки(НомерСтроки, КолонкаКвартиры);
		
		Если Не ПустаяСтрока(НаименованиеКвартирыИзСтроки) Тогда		
			НаименованиеКвартиры = НаименованиеКвартирыИзСтроки;
		КонецЕсли;
		
		СсылкаПодрядчик = СоответствиеПодрядчик.Получить(НаименованиеПодрядчика);
		
		Если СсылкаПодрядчик = Неопределено Тогда
			
			СсылкаПодрядчик = ПолучитьСсылкуПодрядчик(НаименованиеПодрядчика);
			
			Если СсылкаПодрядчик = Неопределено Тогда
				Сообщить("Необходимо сначала создать субподрядчиков. Загрузка будет прервана");
				Возврат Неопределено;
			КонецЕсли;
			
			СоответствиеПодрядчик.Вставить(НаименованиеПодрядчика, СсылкаПодрядчик);
			
		КонецЕсли;
		
		//СсылкаКвартира = СоответствиеНомерКвартиры.Получить(НаименованиеКвартиры);
		//Если СсылкаКвартира = Неопределено Тогда	
		//	СсылкаКвартира = ПолучитьСсылкуКвартира(НаименованиеКвартиры);				
		//	СоответствиеНомерКвартиры.Вставить(НаименованиеКвартиры, СсылкаКвартира);
		//	СоответствиеНаименованиеКвартиры.Вставить(СсылкаКвартира, СсылкаКвартира.Наименование);	
		//КонецЕсли;
		
		НомерКомнатыИзСтроки = ПолучитьЗначениеИзСтроки(НомерСтроки, КолонкаКомнат);
		
		Если Не ПустаяСтрока(НомерКомнатыИзСтроки) Тогда
			
			НоваяСтрока.Дом = Дом;
			НоваяСтрока.Подрядчик = СсылкаПодрядчик;
			//НоваяСтрока.Квартира = СсылкаКвартира;
			НоваяСтрока.Квартира = НаименованиеКвартиры;
			НоваяСтрока.Счетчик = 1; 
			НоваяСтрока.НомерКомнаты = НомерКомнатыИзСтроки;
			
			СсылкаНомер = ПолучитьСсылкуНаНомер(НаименованиеКвартиры, НомерКомнатыИзСтроки, СсылкаПодрядчик);
			
			НоваяСтрока.Номер = СсылкаНомер;
		Иначе
			Продолжить;			
		КонецЕсли;
		
		НаименованиеСотрудникаАнгл = "";
		
		Если ЗначениеЗаполнено(КолонкаСотрудниковАнгл) Тогда
			НаименованиеСотрудникаАнгл = ПолучитьЗначениеИзСтроки(НомерСтроки, КолонкаСотрудниковАнгл);
		КонецЕсли;
			
		НаименованиеСотрудника = ПолучитьЗначениеИзСтроки(НомерСтроки, КолонкаСотрудников);
		ДолжностьСотрудника = ПолучитьЗначениеИзСтроки(НомерСтроки, КолонкаДолжностей);
		
		Если ПустаяСтрока(НаименованиеСотрудника) Тогда
			Продолжить;
		КонецЕсли;
		
		Разделитель = " ";
		Строки = СтрЗаменить(НаименованиеСотрудника, Разделитель, Символы.ПС);
		
		Если СтрЧислоСтрок(Строки) = 3 Тогда
			Фамилия = СтрПолучитьСтроку(Строки, 1);
			Имя =  СтрПолучитьСтроку(Строки, 2);
			Отчество =  СтрПолучитьСтроку(Строки, 3)
		ИначеЕсли СтрЧислоСтрок(Строки) = 2 Тогда
			Фамилия = СтрПолучитьСтроку(Строки, 1);	
			Разделитель = ".";
			Строки = СтрЗаменить(СтрПолучитьСтроку(Строки, 2), Разделитель, Символы.ПС);
			Имя = СтрПолучитьСтроку(Строки, 1)+".";
			Отчество = СтрПолучитьСтроку(Строки, 2)+".";
		Иначе
			Продолжить;
		КонецЕсли;
		
		СсылкаСотрудник = ПолучитьСсылкуСотрудника(Фамилия, Имя, Отчество, ДолжностьСотрудника, НаименованиеПодрядчика, НаименованиеСотрудникаАнгл);
		
		НоваяСтрока.Сотрудник = СсылкаСотрудник;
				
		Если Не ПроверитьДоступностьНомера(Гостиница, ТипНомера, СсылкаНомер, ТекущаяДатаСеанса(), 
											КонецГода(ТекущаяДатаСеанса())) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Номер %1 занят.",СсылкаНомер);
			Сообщение.Сообщить();
			Продолжить;
			
		КонецЕсли;
		
		// создать Размещение
		ДокументРазмещение = Документы.Accommodation.СоздатьДокумент();
		ДокументРазмещение.Дата = ТекущаяДатаСеанса();
		ДокументРазмещение.Hotel = Гостиница;
		ДокументРазмещение.RoomType = ТипНомера;
		ДокументРазмещение.Room = СсылкаНомер;
		ДокументРазмещение.Guest  = СсылкаСотрудник;
		ДокументРазмещение.Company  = Гостиница.Company;
		ДокументРазмещение.AccommodationStatus = Гостиница.CheckInAccommodationStatus;
		ДокументРазмещение.RoomRate = Гостиница.RoomRate;
		ДокументРазмещение.ReportingCurrency = Гостиница.ReportingCurrency;
		ДокументРазмещение.CheckInDate   = ТекущаяДатаСеанса();
		//ДокументРазмещение.CheckOutDate   = ДобавитьМесяц(КонецГода(ТекущаяДатаСеанса()), 12);
		ДокументРазмещение.CheckOutDate   = КонецМесяца(ТекущаяДатаСеанса());
		ДокументРазмещение.Duration = ДокументРазмещение.pmCalculateDuration();
		ДокументРазмещение.AccommodationType = cmGetDefaultAccommodationType(Гостиница, ТипНомера);
		ДокументРазмещение.GuestGroup = pmCreateGuestGroup();
		ДокументРазмещение.ReportingCurrencyExchangeRate = cmGetCurrencyExchangeRate(Гостиница, Гостиница.ReportingCurrency, НачалоДня(ТекущаяДатаСеанса()));
		ДокументРазмещение.ExchangeRateDate  = ТекущаяДатаСеанса();
		ДокументРазмещение.NumberOfAdults = 1;
		ДокументРазмещение.NumberOfPersons = 1;
		ДокументРазмещение.NumberOfBeds = 1;
		ДокументРазмещение.NumberOfBedsPerRoom = 1;
		ДокументРазмещение.NumberOfPersonsPerRoom = 1;
		ДокументРазмещение.NumberOfRooms = 1;
		//ДокументРазмещение.RoomRateServiceGroup = Гостиница.RoomRateServiceGroup;
		ДокументРазмещение.PlannedPaymentMethod = Гостиница.PlannedPaymentMethod;
		ДокументРазмещение.AccommodationTemplate = ШаблонРазмещения;
		ДокументРазмещение.Author  = SessionParameters.CurrentUser;
			
		ДокументРазмещение.pmCreateFolios();
		//ДокументРазмещение.pmLoadChargingRules(СсылкаНомер);
		Результат = ДокументРазмещение.pmCalculateServices();
		
		Если Результат Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументРазмещение.Записать(РежимЗаписиДокумента.Проведение);
		ДокументРазмещение.pmWriteToAccommodationChangeHistory(CurrentSessionDate(), SessionParameters.CurrentUser)
		
	КонецЦикла;
	
	ТЗ_Итог = ТЗ_Номера.Скопировать();
	
	ТЗ_Итог.Свернуть("Подрядчик, Квартира", "Счетчик");
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ_Итог);
	
	тОтбор = Построитель.Отбор.Добавить("Счетчик");
	тОтбор.ВидСравнения = ВидСравнения.Меньше;
	тОтбор.Значение = 4;
	тОтбор.Использование = Истина;
		
	Построитель.Выполнить();	
	ТабРезультат = Построитель.Результат.Выгрузить();
		
	Для каждого Строка Из ТабРезультат Цикл
		
		Если Строка.Счетчик = 0 Тогда
			Продолжить;
		КонецЕсли;
				
		Для Номер = 1 по 4 Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Квартира", Строка.Квартира);
			Отбор.Вставить("НомерКомнаты", Строка(Номер));
			
			Строки = ТЗ_Номера.НайтиСтроки(Отбор);
		
			Если Строки.Количество() = 0 Тогда
				
				ПолучитьСсылкуНаНомер(Строка.Квартира, Строка(Номер), Строка.Подрядчик);
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПроверитьДоступностьНомера(pHotel, pRoomType, pRoom, pDateFrom, pDateTo)
	
	vRoomsVacant = 0;
	
	vQry = New Query();
	vQry.Text = 
	"SELECT Разрешенные
	|	RoomInventoryBalance.Hotel AS Hotel,
	|	RoomInventoryBalance.RoomType AS RoomType,
	|	RoomInventoryBalance.Room AS Room,
	|	MIN(RoomInventoryBalance.CounterClosingBalance) AS CounterClosingBalance,
	|	MIN(RoomInventoryBalance.TotalBedsClosingBalance) AS TotalBeds,
	|	MIN(RoomInventoryBalance.TotalRoomsClosingBalance) AS TotalRooms,
	|	MIN(RoomInventoryBalance.RoomsVacantClosingBalance) AS RoomsVacant,
	|	MIN(RoomInventoryBalance.BedsVacantClosingBalance) AS BedsVacant,
	|	MIN(RoomInventoryBalance.GuestsVacantClosingBalance) AS GuestsVacant
	|FROM
	|	AccumulationRegister.RoomInventory.BalanceAndTurnovers(
	|			&qDateFrom,
	|			&qDateTo,
	|			Second,
	|			RegisterRecordsAndPeriodBoundaries,
	|			Hotel = &qHotel
	|				AND RoomType = &qRoomType
	|				AND Room = &qRoom) AS RoomInventoryBalance
	|
	|GROUP BY
	|	RoomInventoryBalance.Hotel,
	|	RoomInventoryBalance.RoomType,
	|	RoomInventoryBalance.Room";
	
	vQry.SetParameter("qHotel", pHotel);
	vQry.SetParameter("qRoomType", pRoomType);
	vQry.SetParameter("qRoom", pRoom);
	vQry.SetParameter("qDateFrom", pDateFrom);
	vQry.SetParameter("qDateTo", New Boundary(pDateTo, BoundaryType.Excluding));
	
	vQryTab = vQry.Execute().Unload();
	For Each vQryTabRow In vQryTab Do
		vRoomsVacant = vQryTabRow.RoomsVacant;
		Break;
	EndDo;
	
	Если vRoomsVacant <= 0 Тогда	
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция pmCreateGuestGroup()
	
	vGuestGroupObj = Catalogs.GuestGroups.CreateItem();
	vGuestGroupObj.Owner = Гостиница;
	vGuestGroupFolder = Гостиница.GetObject().pmGetGuestGroupFolder();
	If ValueIsFilled(vGuestGroupFolder) Then
		vGuestGroupObj.Parent = vGuestGroupFolder;
		vGuestGroupObj.SetNewCode();
	EndIf;
	vGuestGroupObj.OneCustomerPerGuestGroup = Гостиница.OneCustomerPerGuestGroup;
	vGuestGroupObj.Write();
	// Fill document attribute
	Возврат vGuestGroupObj.Ref;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуСотрудника(Фамилия, Имя, Отчество, ДолжностьСотрудника, НаименованиеПодрядчика, НаименованиеСотрудникаАнгл)
	
	ПолноеИмяСотрудника = Фамилия + " " + Имя + " " + Отчество;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Clients.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Clients КАК Clients
	|ГДЕ
	|	Clients.FullName = &FullName
	|	И Clients.PlaceOfEmployment = &PlaceOfEmployment";
	
	Запрос.УстановитьПараметр("FullName", ПолноеИмяСотрудника);
	Запрос.УстановитьПараметр("PlaceOfEmployment", НаименованиеПодрядчика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		СправочникОбъект = Справочники.Clients.СоздатьЭлемент();
		СправочникОбъект.Position = ДолжностьСотрудника;
		СправочникОбъект.LastName = Фамилия;
		СправочникОбъект.FirstName = Имя;
		СправочникОбъект.SecondName = Отчество;
		СправочникОбъект.PlaceOfEmployment = НаименованиеПодрядчика;
		СправочникОбъект.Sex = Перечисления.Sex.Male;
		СправочникОбъект.ПолноеИмяEng = НаименованиеСотрудникаАнгл;
		СправочникОбъект.Author = SessionParameters.CurrentUser;
		
		СправочникОбъект.Записать();
		
		Возврат СправочникОбъект.Ссылка; 
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНаНомер(НаименованиеКвартиры, НомерКомнатыИзСтроки, СсылкаПодрядчик)
	
	НаименованиеНомера = НаименованиеДома + " - кв." + НаименованиеКвартиры + " - комн." + НомерКомнатыИзСтроки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Rooms.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Rooms КАК Rooms
	|ГДЕ
	|	Rooms.ЭтоГруппа = Ложь
	|	И Rooms.Наименование = &Наименование
	|	И Rooms.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеНомера);
	Запрос.УстановитьПараметр("Родитель", Дом);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ссылка;
	Иначе
		//СправочникОбъект = Справочники.Rooms.СоздатьГруппу();
		//СправочникОбъект.Наименование = НаименованиеГруппыКвартиры;
		//СправочникОбъект.Родитель = Дом;
		//СправочникОбъект.Владелец = Дом.Владелец;
		//СправочникОбъект.Записать();
		
		//Возврат СправочникОбъект.Ссылка;
		
		ДокументОбъект = Документы.AddRoom.СоздатьДокумент();
		ДокументОбъект.Hotel = Гостиница;
		ДокументОбъект.Дата = НачалоДня(ТекущаяДатаСеанса());
		ДокументОбъект.RoomGroup = Дом;
		ДокументОбъект.НомерКвартиры = НаименованиеКвартиры;
		ДокументОбъект.RoomNumber  = НаименованиеНомера;
		ДокументОбъект.SortCode = УдаляемНечисла(НаименованиеНомера);
		ДокументОбъект.NumberOfBedsPerRoom = 1;
		ДокументОбъект.NumberOfPersonsPerRoom = 1;
		ДокументОбъект.RoomType  = ТипНомера;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		МенеджерЗаписи = РегистрыСведений.Расш1_СоставНомерногоФонда.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Номер = ДокументОбъект.Room;
		МенеджерЗаписи.НомернойФонд = СсылкаПодрядчик;
		
		МенеджерЗаписи.Записать();
		
		Возврат ДокументОбъект.Room;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УдаляемНеЧисла(СтрокаДляРазбора)
	
	ОбработаннаяСтрокаСтр = СокрЛП(СтрокаДляРазбора);
	РезультатРаботы = ОбработаннаяСтрокаСтр;
	
	Для н=1 по СтрДлина(ОбработаннаяСтрокаСтр) Цикл
		ТекСимвол = Сред(ОбработаннаяСтрокаСтр,н,1);
		Если Найти("0123456789",ТекСимвол) = 0 Тогда
			РезультатРаботы = СтрЗаменить(РезультатРаботы, ТекСимвол, ""); 
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат РезультатРаботы;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеИзСтроки(НомерСтроки, Колонка)
	
	Возврат СокрЛП(ТабДок.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(Колонка,"ЧГ=")).Текст)
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуКвартира(НаименованиеКвартиры)
	
	НаименованиеГруппыКвартиры = "кв." + НаименованиеКвартиры;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Rooms.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Rooms КАК Rooms
	|ГДЕ
	|	Rooms.ЭтоГруппа = ИСТИНА
	|	И Rooms.Наименование = &Наименование
	|	И Rooms.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеГруппыКвартиры);
	Запрос.УстановитьПараметр("Родитель", Дом);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ссылка;
	Иначе
		СправочникОбъект = Справочники.Rooms.СоздатьГруппу();
		СправочникОбъект.Наименование = НаименованиеГруппыКвартиры;
		СправочникОбъект.Родитель = Дом;
		СправочникОбъект.Владелец = Гостиница;
		СправочникОбъект.Записать();
		
		Возврат СправочникОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуПодрядчик(НаименованиеПодрядчика)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расш1_НомерныеФонды.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Расш1_НомерныеФонды КАК Расш1_НомерныеФонды
	|ГДЕ
	|	Расш1_НомерныеФонды.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеПодрядчика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДомПриИзменении(Элемент)
	
	НаименованиеДома = ПолучитьНаименованиеДома();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНаименованиеДома()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Rooms.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Rooms КАК Rooms
	|ГДЕ
	|	Rooms.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Дом);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Наименование;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КолонкаДолжностей = 6;
	КолонкаСотрудников = 5;
	КолонкаКомнат = 4;
	КолонкаКвартиры =3;
	КолонкаПодрядчиков = 2;
	НомерПервойСтроки = 1;
	
КонецПроцедуры
